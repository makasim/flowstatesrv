// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flowstate/v1alpha1/engine.proto

package flowstatev1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/makasim/flowstatesrv/internal/protogen/flowstate/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// EngineServiceName is the fully-qualified name of the EngineService service.
	EngineServiceName = "flowstate.v1alpha1.EngineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EngineServiceDoProcedure is the fully-qualified name of the EngineService's Do RPC.
	EngineServiceDoProcedure = "/flowstate.v1alpha1.EngineService/Do"
	// EngineServiceWatchProcedure is the fully-qualified name of the EngineService's Watch RPC.
	EngineServiceWatchProcedure = "/flowstate.v1alpha1.EngineService/Watch"
)

// EngineServiceClient is a client for the flowstate.v1alpha1.EngineService service.
type EngineServiceClient interface {
	Do(context.Context, *connect.Request[v1alpha1.DoRequest]) (*connect.Response[v1alpha1.DoResponse], error)
	Watch(context.Context, *connect.Request[v1alpha1.WatchRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchResponse], error)
}

// NewEngineServiceClient constructs a client for the flowstate.v1alpha1.EngineService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEngineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EngineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &engineServiceClient{
		do: connect.NewClient[v1alpha1.DoRequest, v1alpha1.DoResponse](
			httpClient,
			baseURL+EngineServiceDoProcedure,
			opts...,
		),
		watch: connect.NewClient[v1alpha1.WatchRequest, v1alpha1.WatchResponse](
			httpClient,
			baseURL+EngineServiceWatchProcedure,
			opts...,
		),
	}
}

// engineServiceClient implements EngineServiceClient.
type engineServiceClient struct {
	do    *connect.Client[v1alpha1.DoRequest, v1alpha1.DoResponse]
	watch *connect.Client[v1alpha1.WatchRequest, v1alpha1.WatchResponse]
}

// Do calls flowstate.v1alpha1.EngineService.Do.
func (c *engineServiceClient) Do(ctx context.Context, req *connect.Request[v1alpha1.DoRequest]) (*connect.Response[v1alpha1.DoResponse], error) {
	return c.do.CallUnary(ctx, req)
}

// Watch calls flowstate.v1alpha1.EngineService.Watch.
func (c *engineServiceClient) Watch(ctx context.Context, req *connect.Request[v1alpha1.WatchRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// EngineServiceHandler is an implementation of the flowstate.v1alpha1.EngineService service.
type EngineServiceHandler interface {
	Do(context.Context, *connect.Request[v1alpha1.DoRequest]) (*connect.Response[v1alpha1.DoResponse], error)
	Watch(context.Context, *connect.Request[v1alpha1.WatchRequest], *connect.ServerStream[v1alpha1.WatchResponse]) error
}

// NewEngineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEngineServiceHandler(svc EngineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	engineServiceDoHandler := connect.NewUnaryHandler(
		EngineServiceDoProcedure,
		svc.Do,
		opts...,
	)
	engineServiceWatchHandler := connect.NewServerStreamHandler(
		EngineServiceWatchProcedure,
		svc.Watch,
		opts...,
	)
	return "/flowstate.v1alpha1.EngineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EngineServiceDoProcedure:
			engineServiceDoHandler.ServeHTTP(w, r)
		case EngineServiceWatchProcedure:
			engineServiceWatchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEngineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEngineServiceHandler struct{}

func (UnimplementedEngineServiceHandler) Do(context.Context, *connect.Request[v1alpha1.DoRequest]) (*connect.Response[v1alpha1.DoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1alpha1.EngineService.Do is not implemented"))
}

func (UnimplementedEngineServiceHandler) Watch(context.Context, *connect.Request[v1alpha1.WatchRequest], *connect.ServerStream[v1alpha1.WatchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1alpha1.EngineService.Watch is not implemented"))
}
