// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file flowstate/v1/state.proto (package flowstate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message flowstate.v1.Data
 */
export class Data extends Message<Data> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 rev = 2;
   */
  rev = protoInt64.zero;

  /**
   * @generated from field: bool binary = 3;
   */
  binary = false;

  /**
   * @generated from field: string b = 4;
   */
  b = "";

  constructor(data?: PartialMessage<Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rev", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "binary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "b", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {
    return new Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJsonString(jsonString, options);
  }

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {
    return proto3.util.equals(Data, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DataRef
 */
export class DataRef extends Message<DataRef> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 rev = 2;
   */
  rev = protoInt64.zero;

  constructor(data?: PartialMessage<DataRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DataRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rev", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataRef {
    return new DataRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataRef {
    return new DataRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataRef {
    return new DataRef().fromJsonString(jsonString, options);
  }

  static equals(a: DataRef | PlainMessage<DataRef> | undefined, b: DataRef | PlainMessage<DataRef> | undefined): boolean {
    return proto3.util.equals(DataRef, a, b);
  }
}

/**
 * @generated from message flowstate.v1.StateRef
 */
export class StateRef extends Message<StateRef> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 rev = 2;
   */
  rev = protoInt64.zero;

  constructor(data?: PartialMessage<StateRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.StateRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rev", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateRef {
    return new StateRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateRef {
    return new StateRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateRef {
    return new StateRef().fromJsonString(jsonString, options);
  }

  static equals(a: StateRef | PlainMessage<StateRef> | undefined, b: StateRef | PlainMessage<StateRef> | undefined): boolean {
    return proto3.util.equals(StateRef, a, b);
  }
}

/**
 * @generated from message flowstate.v1.StateContext
 */
export class StateContext extends Message<StateContext> {
  /**
   * @generated from field: flowstate.v1.State committed = 1;
   */
  committed?: State;

  /**
   * @generated from field: flowstate.v1.State current = 2;
   */
  current?: State;

  /**
   * @generated from field: repeated flowstate.v1.Transition transitions = 3;
   */
  transitions: Transition[] = [];

  constructor(data?: PartialMessage<StateContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.StateContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "committed", kind: "message", T: State },
    { no: 2, name: "current", kind: "message", T: State },
    { no: 3, name: "transitions", kind: "message", T: Transition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StateContext {
    return new StateContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StateContext {
    return new StateContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StateContext {
    return new StateContext().fromJsonString(jsonString, options);
  }

  static equals(a: StateContext | PlainMessage<StateContext> | undefined, b: StateContext | PlainMessage<StateContext> | undefined): boolean {
    return proto3.util.equals(StateContext, a, b);
  }
}

/**
 * @generated from message flowstate.v1.State
 */
export class State extends Message<State> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 rev = 2;
   */
  rev = protoInt64.zero;

  /**
   * @generated from field: map<string, string> annotations = 3;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: int64 committed_at_unix_milli = 5;
   */
  committedAtUnixMilli = protoInt64.zero;

  /**
   * @generated from field: flowstate.v1.Transition transition = 6;
   */
  transition?: Transition;

  constructor(data?: PartialMessage<State>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.State";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rev", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "committed_at_unix_milli", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "transition", kind: "message", T: Transition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State {
    return new State().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State {
    return new State().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State {
    return new State().fromJsonString(jsonString, options);
  }

  static equals(a: State | PlainMessage<State> | undefined, b: State | PlainMessage<State> | undefined): boolean {
    return proto3.util.equals(State, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Transition
 */
export class Transition extends Message<Transition> {
  /**
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * @generated from field: string to = 2;
   */
  to = "";

  /**
   * @generated from field: map<string, string> annotations = 3;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Transition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Transition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transition {
    return new Transition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transition {
    return new Transition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transition {
    return new Transition().fromJsonString(jsonString, options);
  }

  static equals(a: Transition | PlainMessage<Transition> | undefined, b: Transition | PlainMessage<Transition> | undefined): boolean {
    return proto3.util.equals(Transition, a, b);
  }
}

