// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file flowstate/v1/commands.proto (package flowstate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DataRef, StateRef } from "./state_pb.js";

/**
 * @generated from message flowstate.v1.AnyCommand
 */
export class AnyCommand extends Message<AnyCommand> {
  /**
   * @generated from oneof flowstate.v1.AnyCommand.command
   */
  command: {
    /**
     * @generated from field: flowstate.v1.Transit transit = 1;
     */
    value: Transit;
    case: "transit";
  } | {
    /**
     * @generated from field: flowstate.v1.Pause pause = 2;
     */
    value: Pause;
    case: "pause";
  } | {
    /**
     * @generated from field: flowstate.v1.Resume resume = 3;
     */
    value: Resume;
    case: "resume";
  } | {
    /**
     * @generated from field: flowstate.v1.End end = 4;
     */
    value: End;
    case: "end";
  } | {
    /**
     * @generated from field: flowstate.v1.Execute execute = 5;
     */
    value: Execute;
    case: "execute";
  } | {
    /**
     * @generated from field: flowstate.v1.Delay delay = 6;
     */
    value: Delay;
    case: "delay";
  } | {
    /**
     * @generated from field: flowstate.v1.Commit commit = 7;
     */
    value: Commit;
    case: "commit";
  } | {
    /**
     * @generated from field: flowstate.v1.Noop noop = 8;
     */
    value: Noop;
    case: "noop";
  } | {
    /**
     * @generated from field: flowstate.v1.Serialize serialize = 9;
     */
    value: Serialize;
    case: "serialize";
  } | {
    /**
     * @generated from field: flowstate.v1.Deserialize deserialize = 10;
     */
    value: Deserialize;
    case: "deserialize";
  } | {
    /**
     * @generated from field: flowstate.v1.StoreData store_data = 11;
     */
    value: StoreData;
    case: "storeData";
  } | {
    /**
     * @generated from field: flowstate.v1.GetData get_data = 12;
     */
    value: GetData;
    case: "getData";
  } | {
    /**
     * @generated from field: flowstate.v1.ReferenceData reference_data = 13;
     */
    value: ReferenceData;
    case: "referenceData";
  } | {
    /**
     * @generated from field: flowstate.v1.DereferenceData dereference_data = 14;
     */
    value: DereferenceData;
    case: "dereferenceData";
  } | {
    /**
     * @generated from field: flowstate.v1.Get get = 15;
     */
    value: Get;
    case: "get";
  } | {
    /**
     * @generated from field: flowstate.v1.CommitState commit_state = 16;
     */
    value: CommitState;
    case: "commitState";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AnyCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.AnyCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transit", kind: "message", T: Transit, oneof: "command" },
    { no: 2, name: "pause", kind: "message", T: Pause, oneof: "command" },
    { no: 3, name: "resume", kind: "message", T: Resume, oneof: "command" },
    { no: 4, name: "end", kind: "message", T: End, oneof: "command" },
    { no: 5, name: "execute", kind: "message", T: Execute, oneof: "command" },
    { no: 6, name: "delay", kind: "message", T: Delay, oneof: "command" },
    { no: 7, name: "commit", kind: "message", T: Commit, oneof: "command" },
    { no: 8, name: "noop", kind: "message", T: Noop, oneof: "command" },
    { no: 9, name: "serialize", kind: "message", T: Serialize, oneof: "command" },
    { no: 10, name: "deserialize", kind: "message", T: Deserialize, oneof: "command" },
    { no: 11, name: "store_data", kind: "message", T: StoreData, oneof: "command" },
    { no: 12, name: "get_data", kind: "message", T: GetData, oneof: "command" },
    { no: 13, name: "reference_data", kind: "message", T: ReferenceData, oneof: "command" },
    { no: 14, name: "dereference_data", kind: "message", T: DereferenceData, oneof: "command" },
    { no: 15, name: "get", kind: "message", T: Get, oneof: "command" },
    { no: 16, name: "commit_state", kind: "message", T: CommitState, oneof: "command" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyCommand {
    return new AnyCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyCommand {
    return new AnyCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyCommand {
    return new AnyCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AnyCommand | PlainMessage<AnyCommand> | undefined, b: AnyCommand | PlainMessage<AnyCommand> | undefined): boolean {
    return proto3.util.equals(AnyCommand, a, b);
  }
}

/**
 * @generated from message flowstate.v1.AnyResult
 */
export class AnyResult extends Message<AnyResult> {
  /**
   * @generated from oneof flowstate.v1.AnyResult.result
   */
  result: {
    /**
     * @generated from field: flowstate.v1.TransitResult transit = 1;
     */
    value: TransitResult;
    case: "transit";
  } | {
    /**
     * @generated from field: flowstate.v1.PauseResult pause = 2;
     */
    value: PauseResult;
    case: "pause";
  } | {
    /**
     * @generated from field: flowstate.v1.ResumeResult resume = 3;
     */
    value: ResumeResult;
    case: "resume";
  } | {
    /**
     * @generated from field: flowstate.v1.EndResult end = 4;
     */
    value: EndResult;
    case: "end";
  } | {
    /**
     * @generated from field: flowstate.v1.ExecuteResult execute = 5;
     */
    value: ExecuteResult;
    case: "execute";
  } | {
    /**
     * @generated from field: flowstate.v1.DelayResult delay = 6;
     */
    value: DelayResult;
    case: "delay";
  } | {
    /**
     * @generated from field: flowstate.v1.CommitResult commit = 7;
     */
    value: CommitResult;
    case: "commit";
  } | {
    /**
     * @generated from field: flowstate.v1.NoopResult noop = 8;
     */
    value: NoopResult;
    case: "noop";
  } | {
    /**
     * @generated from field: flowstate.v1.SerializeResult serialize = 9;
     */
    value: SerializeResult;
    case: "serialize";
  } | {
    /**
     * @generated from field: flowstate.v1.DeserializeResult deserialize = 10;
     */
    value: DeserializeResult;
    case: "deserialize";
  } | {
    /**
     * @generated from field: flowstate.v1.StoreDataResult store_data = 11;
     */
    value: StoreDataResult;
    case: "storeData";
  } | {
    /**
     * @generated from field: flowstate.v1.GetDataResult get_data = 12;
     */
    value: GetDataResult;
    case: "getData";
  } | {
    /**
     * @generated from field: flowstate.v1.ReferenceDataResult reference_data = 13;
     */
    value: ReferenceDataResult;
    case: "referenceData";
  } | {
    /**
     * @generated from field: flowstate.v1.DereferenceDataResult dereference_data = 14;
     */
    value: DereferenceDataResult;
    case: "dereferenceData";
  } | {
    /**
     * @generated from field: flowstate.v1.GetResult get = 15;
     */
    value: GetResult;
    case: "get";
  } | {
    /**
     * @generated from field: flowstate.v1.CommitStateResult commit_state = 16;
     */
    value: CommitStateResult;
    case: "commitState";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AnyResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.AnyResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transit", kind: "message", T: TransitResult, oneof: "result" },
    { no: 2, name: "pause", kind: "message", T: PauseResult, oneof: "result" },
    { no: 3, name: "resume", kind: "message", T: ResumeResult, oneof: "result" },
    { no: 4, name: "end", kind: "message", T: EndResult, oneof: "result" },
    { no: 5, name: "execute", kind: "message", T: ExecuteResult, oneof: "result" },
    { no: 6, name: "delay", kind: "message", T: DelayResult, oneof: "result" },
    { no: 7, name: "commit", kind: "message", T: CommitResult, oneof: "result" },
    { no: 8, name: "noop", kind: "message", T: NoopResult, oneof: "result" },
    { no: 9, name: "serialize", kind: "message", T: SerializeResult, oneof: "result" },
    { no: 10, name: "deserialize", kind: "message", T: DeserializeResult, oneof: "result" },
    { no: 11, name: "store_data", kind: "message", T: StoreDataResult, oneof: "result" },
    { no: 12, name: "get_data", kind: "message", T: GetDataResult, oneof: "result" },
    { no: 13, name: "reference_data", kind: "message", T: ReferenceDataResult, oneof: "result" },
    { no: 14, name: "dereference_data", kind: "message", T: DereferenceDataResult, oneof: "result" },
    { no: 15, name: "get", kind: "message", T: GetResult, oneof: "result" },
    { no: 16, name: "commit_state", kind: "message", T: CommitStateResult, oneof: "result" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyResult {
    return new AnyResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyResult {
    return new AnyResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyResult {
    return new AnyResult().fromJsonString(jsonString, options);
  }

  static equals(a: AnyResult | PlainMessage<AnyResult> | undefined, b: AnyResult | PlainMessage<AnyResult> | undefined): boolean {
    return proto3.util.equals(AnyResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Transit
 */
export class Transit extends Message<Transit> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string flow_id = 2;
   */
  flowId = "";

  constructor(data?: PartialMessage<Transit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Transit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "flow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transit {
    return new Transit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transit {
    return new Transit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transit {
    return new Transit().fromJsonString(jsonString, options);
  }

  static equals(a: Transit | PlainMessage<Transit> | undefined, b: Transit | PlainMessage<Transit> | undefined): boolean {
    return proto3.util.equals(Transit, a, b);
  }
}

/**
 * @generated from message flowstate.v1.TransitResult
 */
export class TransitResult extends Message<TransitResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<TransitResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.TransitResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransitResult {
    return new TransitResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransitResult {
    return new TransitResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransitResult {
    return new TransitResult().fromJsonString(jsonString, options);
  }

  static equals(a: TransitResult | PlainMessage<TransitResult> | undefined, b: TransitResult | PlainMessage<TransitResult> | undefined): boolean {
    return proto3.util.equals(TransitResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Pause
 */
export class Pause extends Message<Pause> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string flow_id = 2;
   */
  flowId = "";

  constructor(data?: PartialMessage<Pause>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Pause";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "flow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pause {
    return new Pause().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pause {
    return new Pause().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pause {
    return new Pause().fromJsonString(jsonString, options);
  }

  static equals(a: Pause | PlainMessage<Pause> | undefined, b: Pause | PlainMessage<Pause> | undefined): boolean {
    return proto3.util.equals(Pause, a, b);
  }
}

/**
 * @generated from message flowstate.v1.PauseResult
 */
export class PauseResult extends Message<PauseResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<PauseResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.PauseResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PauseResult {
    return new PauseResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PauseResult {
    return new PauseResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PauseResult {
    return new PauseResult().fromJsonString(jsonString, options);
  }

  static equals(a: PauseResult | PlainMessage<PauseResult> | undefined, b: PauseResult | PlainMessage<PauseResult> | undefined): boolean {
    return proto3.util.equals(PauseResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Resume
 */
export class Resume extends Message<Resume> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<Resume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Resume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resume {
    return new Resume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resume {
    return new Resume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resume {
    return new Resume().fromJsonString(jsonString, options);
  }

  static equals(a: Resume | PlainMessage<Resume> | undefined, b: Resume | PlainMessage<Resume> | undefined): boolean {
    return proto3.util.equals(Resume, a, b);
  }
}

/**
 * @generated from message flowstate.v1.ResumeResult
 */
export class ResumeResult extends Message<ResumeResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<ResumeResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.ResumeResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResumeResult {
    return new ResumeResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResumeResult {
    return new ResumeResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResumeResult {
    return new ResumeResult().fromJsonString(jsonString, options);
  }

  static equals(a: ResumeResult | PlainMessage<ResumeResult> | undefined, b: ResumeResult | PlainMessage<ResumeResult> | undefined): boolean {
    return proto3.util.equals(ResumeResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.End
 */
export class End extends Message<End> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<End>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.End";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): End {
    return new End().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): End {
    return new End().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): End {
    return new End().fromJsonString(jsonString, options);
  }

  static equals(a: End | PlainMessage<End> | undefined, b: End | PlainMessage<End> | undefined): boolean {
    return proto3.util.equals(End, a, b);
  }
}

/**
 * @generated from message flowstate.v1.EndResult
 */
export class EndResult extends Message<EndResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<EndResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.EndResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndResult {
    return new EndResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndResult {
    return new EndResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndResult {
    return new EndResult().fromJsonString(jsonString, options);
  }

  static equals(a: EndResult | PlainMessage<EndResult> | undefined, b: EndResult | PlainMessage<EndResult> | undefined): boolean {
    return proto3.util.equals(EndResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Execute
 */
export class Execute extends Message<Execute> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<Execute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Execute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Execute {
    return new Execute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Execute {
    return new Execute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Execute {
    return new Execute().fromJsonString(jsonString, options);
  }

  static equals(a: Execute | PlainMessage<Execute> | undefined, b: Execute | PlainMessage<Execute> | undefined): boolean {
    return proto3.util.equals(Execute, a, b);
  }
}

/**
 * @generated from message flowstate.v1.ExecuteResult
 */
export class ExecuteResult extends Message<ExecuteResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<ExecuteResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.ExecuteResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteResult {
    return new ExecuteResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteResult {
    return new ExecuteResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteResult {
    return new ExecuteResult().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteResult | PlainMessage<ExecuteResult> | undefined, b: ExecuteResult | PlainMessage<ExecuteResult> | undefined): boolean {
    return proto3.util.equals(ExecuteResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Delay
 */
export class Delay extends Message<Delay> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string duration = 2;
   */
  duration = "";

  /**
   * @generated from field: bool commit = 3;
   */
  commit = false;

  constructor(data?: PartialMessage<Delay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Delay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Delay {
    return new Delay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Delay {
    return new Delay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Delay {
    return new Delay().fromJsonString(jsonString, options);
  }

  static equals(a: Delay | PlainMessage<Delay> | undefined, b: Delay | PlainMessage<Delay> | undefined): boolean {
    return proto3.util.equals(Delay, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DelayResult
 */
export class DelayResult extends Message<DelayResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string duration = 2;
   */
  duration = "";

  /**
   * @generated from field: bool commit = 3;
   */
  commit = false;

  constructor(data?: PartialMessage<DelayResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DelayResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelayResult {
    return new DelayResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelayResult {
    return new DelayResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelayResult {
    return new DelayResult().fromJsonString(jsonString, options);
  }

  static equals(a: DelayResult | PlainMessage<DelayResult> | undefined, b: DelayResult | PlainMessage<DelayResult> | undefined): boolean {
    return proto3.util.equals(DelayResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Commit
 */
export class Commit extends Message<Commit> {
  /**
   * @generated from field: repeated flowstate.v1.AnyCommand commands = 2;
   */
  commands: AnyCommand[] = [];

  constructor(data?: PartialMessage<Commit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Commit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "commands", kind: "message", T: AnyCommand, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Commit {
    return new Commit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJsonString(jsonString, options);
  }

  static equals(a: Commit | PlainMessage<Commit> | undefined, b: Commit | PlainMessage<Commit> | undefined): boolean {
    return proto3.util.equals(Commit, a, b);
  }
}

/**
 * @generated from message flowstate.v1.CommitResult
 */
export class CommitResult extends Message<CommitResult> {
  /**
   * @generated from field: repeated flowstate.v1.AnyResult results = 3;
   */
  results: AnyResult[] = [];

  constructor(data?: PartialMessage<CommitResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.CommitResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "results", kind: "message", T: AnyResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitResult {
    return new CommitResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitResult {
    return new CommitResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitResult {
    return new CommitResult().fromJsonString(jsonString, options);
  }

  static equals(a: CommitResult | PlainMessage<CommitResult> | undefined, b: CommitResult | PlainMessage<CommitResult> | undefined): boolean {
    return proto3.util.equals(CommitResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.CommitState
 */
export class CommitState extends Message<CommitState> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<CommitState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.CommitState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitState {
    return new CommitState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitState {
    return new CommitState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitState {
    return new CommitState().fromJsonString(jsonString, options);
  }

  static equals(a: CommitState | PlainMessage<CommitState> | undefined, b: CommitState | PlainMessage<CommitState> | undefined): boolean {
    return proto3.util.equals(CommitState, a, b);
  }
}

/**
 * @generated from message flowstate.v1.CommitStateResult
 */
export class CommitStateResult extends Message<CommitStateResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<CommitStateResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.CommitStateResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitStateResult {
    return new CommitStateResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitStateResult {
    return new CommitStateResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitStateResult {
    return new CommitStateResult().fromJsonString(jsonString, options);
  }

  static equals(a: CommitStateResult | PlainMessage<CommitStateResult> | undefined, b: CommitStateResult | PlainMessage<CommitStateResult> | undefined): boolean {
    return proto3.util.equals(CommitStateResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Noop
 */
export class Noop extends Message<Noop> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<Noop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Noop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Noop {
    return new Noop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Noop {
    return new Noop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Noop {
    return new Noop().fromJsonString(jsonString, options);
  }

  static equals(a: Noop | PlainMessage<Noop> | undefined, b: Noop | PlainMessage<Noop> | undefined): boolean {
    return proto3.util.equals(Noop, a, b);
  }
}

/**
 * @generated from message flowstate.v1.NoopResult
 */
export class NoopResult extends Message<NoopResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<NoopResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.NoopResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NoopResult {
    return new NoopResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NoopResult {
    return new NoopResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NoopResult {
    return new NoopResult().fromJsonString(jsonString, options);
  }

  static equals(a: NoopResult | PlainMessage<NoopResult> | undefined, b: NoopResult | PlainMessage<NoopResult> | undefined): boolean {
    return proto3.util.equals(NoopResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Serialize
 */
export class Serialize extends Message<Serialize> {
  /**
   * @generated from field: flowstate.v1.StateRef serializable_state_ref = 1;
   */
  serializableStateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 2;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<Serialize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Serialize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serializable_state_ref", kind: "message", T: StateRef },
    { no: 2, name: "state_ref", kind: "message", T: StateRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Serialize {
    return new Serialize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Serialize {
    return new Serialize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Serialize {
    return new Serialize().fromJsonString(jsonString, options);
  }

  static equals(a: Serialize | PlainMessage<Serialize> | undefined, b: Serialize | PlainMessage<Serialize> | undefined): boolean {
    return proto3.util.equals(Serialize, a, b);
  }
}

/**
 * @generated from message flowstate.v1.SerializeResult
 */
export class SerializeResult extends Message<SerializeResult> {
  /**
   * @generated from field: flowstate.v1.StateRef serializable_state_ref = 1;
   */
  serializableStateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 2;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<SerializeResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.SerializeResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serializable_state_ref", kind: "message", T: StateRef },
    { no: 2, name: "state_ref", kind: "message", T: StateRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerializeResult {
    return new SerializeResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerializeResult {
    return new SerializeResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerializeResult {
    return new SerializeResult().fromJsonString(jsonString, options);
  }

  static equals(a: SerializeResult | PlainMessage<SerializeResult> | undefined, b: SerializeResult | PlainMessage<SerializeResult> | undefined): boolean {
    return proto3.util.equals(SerializeResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Deserialize
 */
export class Deserialize extends Message<Deserialize> {
  /**
   * @generated from field: flowstate.v1.StateRef deserialized_state_ref = 1;
   */
  deserializedStateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 2;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<Deserialize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Deserialize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deserialized_state_ref", kind: "message", T: StateRef },
    { no: 2, name: "state_ref", kind: "message", T: StateRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deserialize {
    return new Deserialize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deserialize {
    return new Deserialize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deserialize {
    return new Deserialize().fromJsonString(jsonString, options);
  }

  static equals(a: Deserialize | PlainMessage<Deserialize> | undefined, b: Deserialize | PlainMessage<Deserialize> | undefined): boolean {
    return proto3.util.equals(Deserialize, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DeserializeResult
 */
export class DeserializeResult extends Message<DeserializeResult> {
  /**
   * @generated from field: flowstate.v1.StateRef deserialized_state_ref = 1;
   */
  deserializedStateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 2;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<DeserializeResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DeserializeResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deserialized_state_ref", kind: "message", T: StateRef },
    { no: 2, name: "state_ref", kind: "message", T: StateRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeserializeResult {
    return new DeserializeResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeserializeResult {
    return new DeserializeResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeserializeResult {
    return new DeserializeResult().fromJsonString(jsonString, options);
  }

  static equals(a: DeserializeResult | PlainMessage<DeserializeResult> | undefined, b: DeserializeResult | PlainMessage<DeserializeResult> | undefined): boolean {
    return proto3.util.equals(DeserializeResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.ReferenceData
 */
export class ReferenceData extends Message<ReferenceData> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 2;
   */
  dataRef?: DataRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<ReferenceData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.ReferenceData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "data_ref", kind: "message", T: DataRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReferenceData {
    return new ReferenceData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReferenceData {
    return new ReferenceData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReferenceData {
    return new ReferenceData().fromJsonString(jsonString, options);
  }

  static equals(a: ReferenceData | PlainMessage<ReferenceData> | undefined, b: ReferenceData | PlainMessage<ReferenceData> | undefined): boolean {
    return proto3.util.equals(ReferenceData, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DereferenceDataResult
 */
export class DereferenceDataResult extends Message<DereferenceDataResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 2;
   */
  dataRef?: DataRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<DereferenceDataResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DereferenceDataResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "data_ref", kind: "message", T: DataRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DereferenceDataResult {
    return new DereferenceDataResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DereferenceDataResult {
    return new DereferenceDataResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DereferenceDataResult {
    return new DereferenceDataResult().fromJsonString(jsonString, options);
  }

  static equals(a: DereferenceDataResult | PlainMessage<DereferenceDataResult> | undefined, b: DereferenceDataResult | PlainMessage<DereferenceDataResult> | undefined): boolean {
    return proto3.util.equals(DereferenceDataResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DereferenceData
 */
export class DereferenceData extends Message<DereferenceData> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 2;
   */
  dataRef?: DataRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<DereferenceData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DereferenceData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "data_ref", kind: "message", T: DataRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DereferenceData {
    return new DereferenceData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DereferenceData {
    return new DereferenceData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DereferenceData {
    return new DereferenceData().fromJsonString(jsonString, options);
  }

  static equals(a: DereferenceData | PlainMessage<DereferenceData> | undefined, b: DereferenceData | PlainMessage<DereferenceData> | undefined): boolean {
    return proto3.util.equals(DereferenceData, a, b);
  }
}

/**
 * @generated from message flowstate.v1.ReferenceDataResult
 */
export class ReferenceDataResult extends Message<ReferenceDataResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 2;
   */
  dataRef?: DataRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<ReferenceDataResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.ReferenceDataResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "data_ref", kind: "message", T: DataRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReferenceDataResult {
    return new ReferenceDataResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReferenceDataResult {
    return new ReferenceDataResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReferenceDataResult {
    return new ReferenceDataResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReferenceDataResult | PlainMessage<ReferenceDataResult> | undefined, b: ReferenceDataResult | PlainMessage<ReferenceDataResult> | undefined): boolean {
    return proto3.util.equals(ReferenceDataResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetData
 */
export class GetData extends Message<GetData> {
  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 1;
   */
  dataRef?: DataRef;

  constructor(data?: PartialMessage<GetData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ref", kind: "message", T: DataRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetData {
    return new GetData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetData {
    return new GetData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetData {
    return new GetData().fromJsonString(jsonString, options);
  }

  static equals(a: GetData | PlainMessage<GetData> | undefined, b: GetData | PlainMessage<GetData> | undefined): boolean {
    return proto3.util.equals(GetData, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetDataResult
 */
export class GetDataResult extends Message<GetDataResult> {
  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 1;
   */
  dataRef?: DataRef;

  constructor(data?: PartialMessage<GetDataResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetDataResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ref", kind: "message", T: DataRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataResult {
    return new GetDataResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataResult {
    return new GetDataResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataResult {
    return new GetDataResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataResult | PlainMessage<GetDataResult> | undefined, b: GetDataResult | PlainMessage<GetDataResult> | undefined): boolean {
    return proto3.util.equals(GetDataResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.StoreData
 */
export class StoreData extends Message<StoreData> {
  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 1;
   */
  dataRef?: DataRef;

  constructor(data?: PartialMessage<StoreData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.StoreData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ref", kind: "message", T: DataRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreData {
    return new StoreData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreData {
    return new StoreData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreData {
    return new StoreData().fromJsonString(jsonString, options);
  }

  static equals(a: StoreData | PlainMessage<StoreData> | undefined, b: StoreData | PlainMessage<StoreData> | undefined): boolean {
    return proto3.util.equals(StoreData, a, b);
  }
}

/**
 * @generated from message flowstate.v1.StoreDataResult
 */
export class StoreDataResult extends Message<StoreDataResult> {
  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 1;
   */
  dataRef?: DataRef;

  constructor(data?: PartialMessage<StoreDataResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.StoreDataResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ref", kind: "message", T: DataRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreDataResult {
    return new StoreDataResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreDataResult {
    return new StoreDataResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreDataResult {
    return new StoreDataResult().fromJsonString(jsonString, options);
  }

  static equals(a: StoreDataResult | PlainMessage<StoreDataResult> | undefined, b: StoreDataResult | PlainMessage<StoreDataResult> | undefined): boolean {
    return proto3.util.equals(StoreDataResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Get
 */
export class Get extends Message<Get> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 rev = 2;
   */
  rev = protoInt64.zero;

  /**
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 4;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<Get>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Get";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rev", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Get {
    return new Get().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Get {
    return new Get().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Get {
    return new Get().fromJsonString(jsonString, options);
  }

  static equals(a: Get | PlainMessage<Get> | undefined, b: Get | PlainMessage<Get> | undefined): boolean {
    return proto3.util.equals(Get, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetResult
 */
export class GetResult extends Message<GetResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 4;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<GetResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResult {
    return new GetResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResult {
    return new GetResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResult {
    return new GetResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetResult | PlainMessage<GetResult> | undefined, b: GetResult | PlainMessage<GetResult> | undefined): boolean {
    return proto3.util.equals(GetResult, a, b);
  }
}

