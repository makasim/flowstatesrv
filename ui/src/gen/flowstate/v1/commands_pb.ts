// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file flowstate/v1/commands.proto (package flowstate.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DataRef, State, StateRef } from "./state_pb.js";

/**
 * @generated from message flowstate.v1.Command
 */
export class Command extends Message<Command> {
  /**
   * @generated from field: flowstate.v1.Transit transit = 1;
   */
  transit?: Transit;

  /**
   * @generated from field: flowstate.v1.Pause pause = 2;
   */
  pause?: Pause;

  /**
   * @generated from field: flowstate.v1.Resume resume = 3;
   */
  resume?: Resume;

  /**
   * @generated from field: flowstate.v1.End end = 4;
   */
  end?: End;

  /**
   * @generated from field: flowstate.v1.Execute execute = 5;
   */
  execute?: Execute;

  /**
   * @generated from field: flowstate.v1.Delay delay = 6;
   */
  delay?: Delay;

  /**
   * @generated from field: flowstate.v1.Commit commit = 7;
   */
  commit?: Commit;

  /**
   * @generated from field: flowstate.v1.Noop noop = 8;
   */
  noop?: Noop;

  /**
   * @generated from field: flowstate.v1.Serialize serialize = 9;
   */
  serialize?: Serialize;

  /**
   * @generated from field: flowstate.v1.Deserialize deserialize = 10;
   */
  deserialize?: Deserialize;

  /**
   * @generated from field: flowstate.v1.StoreData store_data = 11;
   */
  storeData?: StoreData;

  /**
   * @generated from field: flowstate.v1.GetData get_data = 12;
   */
  getData?: GetData;

  /**
   * @generated from field: flowstate.v1.ReferenceData reference_data = 13;
   */
  referenceData?: ReferenceData;

  /**
   * @generated from field: flowstate.v1.DereferenceData dereference_data = 14;
   */
  dereferenceData?: DereferenceData;

  /**
   * @generated from field: flowstate.v1.GetStateByID get_state_by_id = 15;
   */
  getStateById?: GetStateByID;

  /**
   * @generated from field: flowstate.v1.GetStateByLabels get_state_by_labels = 16;
   */
  getStateByLabels?: GetStateByLabels;

  /**
   * @generated from field: flowstate.v1.GetStates get_states = 17;
   */
  getStates?: GetStates;

  /**
   * @generated from field: flowstate.v1.GetDelayedStates get_delayed_states = 18;
   */
  getDelayedStates?: GetDelayedStates;

  /**
   * @generated from field: flowstate.v1.CommitState commit_state = 19;
   */
  commitState?: CommitState;

  constructor(data?: PartialMessage<Command>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Command";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transit", kind: "message", T: Transit },
    { no: 2, name: "pause", kind: "message", T: Pause },
    { no: 3, name: "resume", kind: "message", T: Resume },
    { no: 4, name: "end", kind: "message", T: End },
    { no: 5, name: "execute", kind: "message", T: Execute },
    { no: 6, name: "delay", kind: "message", T: Delay },
    { no: 7, name: "commit", kind: "message", T: Commit },
    { no: 8, name: "noop", kind: "message", T: Noop },
    { no: 9, name: "serialize", kind: "message", T: Serialize },
    { no: 10, name: "deserialize", kind: "message", T: Deserialize },
    { no: 11, name: "store_data", kind: "message", T: StoreData },
    { no: 12, name: "get_data", kind: "message", T: GetData },
    { no: 13, name: "reference_data", kind: "message", T: ReferenceData },
    { no: 14, name: "dereference_data", kind: "message", T: DereferenceData },
    { no: 15, name: "get_state_by_id", kind: "message", T: GetStateByID },
    { no: 16, name: "get_state_by_labels", kind: "message", T: GetStateByLabels },
    { no: 17, name: "get_states", kind: "message", T: GetStates },
    { no: 18, name: "get_delayed_states", kind: "message", T: GetDelayedStates },
    { no: 19, name: "commit_state", kind: "message", T: CommitState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Command {
    return new Command().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Command {
    return new Command().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Command {
    return new Command().fromJsonString(jsonString, options);
  }

  static equals(a: Command | PlainMessage<Command> | undefined, b: Command | PlainMessage<Command> | undefined): boolean {
    return proto3.util.equals(Command, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Result
 */
export class Result extends Message<Result> {
  /**
   * @generated from field: flowstate.v1.TransitResult transit = 1;
   */
  transit?: TransitResult;

  /**
   * @generated from field: flowstate.v1.PauseResult pause = 2;
   */
  pause?: PauseResult;

  /**
   * @generated from field: flowstate.v1.ResumeResult resume = 3;
   */
  resume?: ResumeResult;

  /**
   * @generated from field: flowstate.v1.EndResult end = 4;
   */
  end?: EndResult;

  /**
   * @generated from field: flowstate.v1.ExecuteResult execute = 5;
   */
  execute?: ExecuteResult;

  /**
   * @generated from field: flowstate.v1.DelayResult delay = 6;
   */
  delay?: DelayResult;

  /**
   * @generated from field: flowstate.v1.CommitResult commit = 7;
   */
  commit?: CommitResult;

  /**
   * @generated from field: flowstate.v1.NoopResult noop = 8;
   */
  noop?: NoopResult;

  /**
   * @generated from field: flowstate.v1.SerializeResult serialize = 9;
   */
  serialize?: SerializeResult;

  /**
   * @generated from field: flowstate.v1.DeserializeResult deserialize = 10;
   */
  deserialize?: DeserializeResult;

  /**
   * @generated from field: flowstate.v1.StoreDataResult store_data = 11;
   */
  storeData?: StoreDataResult;

  /**
   * @generated from field: flowstate.v1.GetDataResult get_data = 12;
   */
  getData?: GetDataResult;

  /**
   * @generated from field: flowstate.v1.ReferenceDataResult reference_data = 13;
   */
  referenceData?: ReferenceDataResult;

  /**
   * @generated from field: flowstate.v1.DereferenceDataResult dereference_data = 14;
   */
  dereferenceData?: DereferenceDataResult;

  /**
   * @generated from field: flowstate.v1.GetStateByIDResult get_state_by_id = 15;
   */
  getStateById?: GetStateByIDResult;

  /**
   * @generated from field: flowstate.v1.GetStateByLabelsResult get_state_by_labels = 16;
   */
  getStateByLabels?: GetStateByLabelsResult;

  /**
   * @generated from field: flowstate.v1.GetStatesResult get_states = 17;
   */
  getStates?: GetStatesResult;

  /**
   * @generated from field: flowstate.v1.GetDelayedStatesResult get_delayed_states = 18;
   */
  getDelayedStates?: GetDelayedStatesResult;

  /**
   * @generated from field: flowstate.v1.CommitStateResult commit_state = 19;
   */
  commitState?: CommitStateResult;

  constructor(data?: PartialMessage<Result>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Result";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transit", kind: "message", T: TransitResult },
    { no: 2, name: "pause", kind: "message", T: PauseResult },
    { no: 3, name: "resume", kind: "message", T: ResumeResult },
    { no: 4, name: "end", kind: "message", T: EndResult },
    { no: 5, name: "execute", kind: "message", T: ExecuteResult },
    { no: 6, name: "delay", kind: "message", T: DelayResult },
    { no: 7, name: "commit", kind: "message", T: CommitResult },
    { no: 8, name: "noop", kind: "message", T: NoopResult },
    { no: 9, name: "serialize", kind: "message", T: SerializeResult },
    { no: 10, name: "deserialize", kind: "message", T: DeserializeResult },
    { no: 11, name: "store_data", kind: "message", T: StoreDataResult },
    { no: 12, name: "get_data", kind: "message", T: GetDataResult },
    { no: 13, name: "reference_data", kind: "message", T: ReferenceDataResult },
    { no: 14, name: "dereference_data", kind: "message", T: DereferenceDataResult },
    { no: 15, name: "get_state_by_id", kind: "message", T: GetStateByIDResult },
    { no: 16, name: "get_state_by_labels", kind: "message", T: GetStateByLabelsResult },
    { no: 17, name: "get_states", kind: "message", T: GetStatesResult },
    { no: 18, name: "get_delayed_states", kind: "message", T: GetDelayedStatesResult },
    { no: 19, name: "commit_state", kind: "message", T: CommitStateResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Result {
    return new Result().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Result {
    return new Result().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Result {
    return new Result().fromJsonString(jsonString, options);
  }

  static equals(a: Result | PlainMessage<Result> | undefined, b: Result | PlainMessage<Result> | undefined): boolean {
    return proto3.util.equals(Result, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Transit
 */
export class Transit extends Message<Transit> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string flow_id = 2;
   */
  flowId = "";

  constructor(data?: PartialMessage<Transit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Transit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "flow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transit {
    return new Transit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transit {
    return new Transit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transit {
    return new Transit().fromJsonString(jsonString, options);
  }

  static equals(a: Transit | PlainMessage<Transit> | undefined, b: Transit | PlainMessage<Transit> | undefined): boolean {
    return proto3.util.equals(Transit, a, b);
  }
}

/**
 * @generated from message flowstate.v1.TransitResult
 */
export class TransitResult extends Message<TransitResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<TransitResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.TransitResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransitResult {
    return new TransitResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransitResult {
    return new TransitResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransitResult {
    return new TransitResult().fromJsonString(jsonString, options);
  }

  static equals(a: TransitResult | PlainMessage<TransitResult> | undefined, b: TransitResult | PlainMessage<TransitResult> | undefined): boolean {
    return proto3.util.equals(TransitResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Pause
 */
export class Pause extends Message<Pause> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string flow_id = 2;
   */
  flowId = "";

  constructor(data?: PartialMessage<Pause>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Pause";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "flow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pause {
    return new Pause().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pause {
    return new Pause().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pause {
    return new Pause().fromJsonString(jsonString, options);
  }

  static equals(a: Pause | PlainMessage<Pause> | undefined, b: Pause | PlainMessage<Pause> | undefined): boolean {
    return proto3.util.equals(Pause, a, b);
  }
}

/**
 * @generated from message flowstate.v1.PauseResult
 */
export class PauseResult extends Message<PauseResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<PauseResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.PauseResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PauseResult {
    return new PauseResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PauseResult {
    return new PauseResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PauseResult {
    return new PauseResult().fromJsonString(jsonString, options);
  }

  static equals(a: PauseResult | PlainMessage<PauseResult> | undefined, b: PauseResult | PlainMessage<PauseResult> | undefined): boolean {
    return proto3.util.equals(PauseResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Resume
 */
export class Resume extends Message<Resume> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<Resume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Resume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resume {
    return new Resume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resume {
    return new Resume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resume {
    return new Resume().fromJsonString(jsonString, options);
  }

  static equals(a: Resume | PlainMessage<Resume> | undefined, b: Resume | PlainMessage<Resume> | undefined): boolean {
    return proto3.util.equals(Resume, a, b);
  }
}

/**
 * @generated from message flowstate.v1.ResumeResult
 */
export class ResumeResult extends Message<ResumeResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<ResumeResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.ResumeResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResumeResult {
    return new ResumeResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResumeResult {
    return new ResumeResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResumeResult {
    return new ResumeResult().fromJsonString(jsonString, options);
  }

  static equals(a: ResumeResult | PlainMessage<ResumeResult> | undefined, b: ResumeResult | PlainMessage<ResumeResult> | undefined): boolean {
    return proto3.util.equals(ResumeResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.End
 */
export class End extends Message<End> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<End>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.End";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): End {
    return new End().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): End {
    return new End().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): End {
    return new End().fromJsonString(jsonString, options);
  }

  static equals(a: End | PlainMessage<End> | undefined, b: End | PlainMessage<End> | undefined): boolean {
    return proto3.util.equals(End, a, b);
  }
}

/**
 * @generated from message flowstate.v1.EndResult
 */
export class EndResult extends Message<EndResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<EndResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.EndResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndResult {
    return new EndResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndResult {
    return new EndResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndResult {
    return new EndResult().fromJsonString(jsonString, options);
  }

  static equals(a: EndResult | PlainMessage<EndResult> | undefined, b: EndResult | PlainMessage<EndResult> | undefined): boolean {
    return proto3.util.equals(EndResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Execute
 */
export class Execute extends Message<Execute> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<Execute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Execute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Execute {
    return new Execute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Execute {
    return new Execute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Execute {
    return new Execute().fromJsonString(jsonString, options);
  }

  static equals(a: Execute | PlainMessage<Execute> | undefined, b: Execute | PlainMessage<Execute> | undefined): boolean {
    return proto3.util.equals(Execute, a, b);
  }
}

/**
 * @generated from message flowstate.v1.ExecuteResult
 */
export class ExecuteResult extends Message<ExecuteResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<ExecuteResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.ExecuteResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteResult {
    return new ExecuteResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteResult {
    return new ExecuteResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteResult {
    return new ExecuteResult().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteResult | PlainMessage<ExecuteResult> | undefined, b: ExecuteResult | PlainMessage<ExecuteResult> | undefined): boolean {
    return proto3.util.equals(ExecuteResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Delay
 */
export class Delay extends Message<Delay> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: int64 execute_at_sec = 2;
   */
  executeAtSec = protoInt64.zero;

  /**
   * @generated from field: bool commit = 3;
   */
  commit = false;

  constructor(data?: PartialMessage<Delay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Delay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "execute_at_sec", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "commit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Delay {
    return new Delay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Delay {
    return new Delay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Delay {
    return new Delay().fromJsonString(jsonString, options);
  }

  static equals(a: Delay | PlainMessage<Delay> | undefined, b: Delay | PlainMessage<Delay> | undefined): boolean {
    return proto3.util.equals(Delay, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DelayResult
 */
export class DelayResult extends Message<DelayResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.State delaying_state = 2;
   */
  delayingState?: State;

  constructor(data?: PartialMessage<DelayResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DelayResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "delaying_state", kind: "message", T: State },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelayResult {
    return new DelayResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelayResult {
    return new DelayResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelayResult {
    return new DelayResult().fromJsonString(jsonString, options);
  }

  static equals(a: DelayResult | PlainMessage<DelayResult> | undefined, b: DelayResult | PlainMessage<DelayResult> | undefined): boolean {
    return proto3.util.equals(DelayResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Commit
 */
export class Commit extends Message<Commit> {
  /**
   * @generated from field: repeated flowstate.v1.Command commands = 2;
   */
  commands: Command[] = [];

  constructor(data?: PartialMessage<Commit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Commit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "commands", kind: "message", T: Command, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Commit {
    return new Commit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Commit {
    return new Commit().fromJsonString(jsonString, options);
  }

  static equals(a: Commit | PlainMessage<Commit> | undefined, b: Commit | PlainMessage<Commit> | undefined): boolean {
    return proto3.util.equals(Commit, a, b);
  }
}

/**
 * @generated from message flowstate.v1.CommitResult
 */
export class CommitResult extends Message<CommitResult> {
  /**
   * @generated from field: repeated flowstate.v1.Result results = 3;
   */
  results: Result[] = [];

  constructor(data?: PartialMessage<CommitResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.CommitResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "results", kind: "message", T: Result, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitResult {
    return new CommitResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitResult {
    return new CommitResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitResult {
    return new CommitResult().fromJsonString(jsonString, options);
  }

  static equals(a: CommitResult | PlainMessage<CommitResult> | undefined, b: CommitResult | PlainMessage<CommitResult> | undefined): boolean {
    return proto3.util.equals(CommitResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.CommitState
 */
export class CommitState extends Message<CommitState> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<CommitState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.CommitState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitState {
    return new CommitState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitState {
    return new CommitState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitState {
    return new CommitState().fromJsonString(jsonString, options);
  }

  static equals(a: CommitState | PlainMessage<CommitState> | undefined, b: CommitState | PlainMessage<CommitState> | undefined): boolean {
    return proto3.util.equals(CommitState, a, b);
  }
}

/**
 * @generated from message flowstate.v1.CommitStateResult
 */
export class CommitStateResult extends Message<CommitStateResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<CommitStateResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.CommitStateResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommitStateResult {
    return new CommitStateResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommitStateResult {
    return new CommitStateResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommitStateResult {
    return new CommitStateResult().fromJsonString(jsonString, options);
  }

  static equals(a: CommitStateResult | PlainMessage<CommitStateResult> | undefined, b: CommitStateResult | PlainMessage<CommitStateResult> | undefined): boolean {
    return proto3.util.equals(CommitStateResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Noop
 */
export class Noop extends Message<Noop> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<Noop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Noop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Noop {
    return new Noop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Noop {
    return new Noop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Noop {
    return new Noop().fromJsonString(jsonString, options);
  }

  static equals(a: Noop | PlainMessage<Noop> | undefined, b: Noop | PlainMessage<Noop> | undefined): boolean {
    return proto3.util.equals(Noop, a, b);
  }
}

/**
 * @generated from message flowstate.v1.NoopResult
 */
export class NoopResult extends Message<NoopResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<NoopResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.NoopResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NoopResult {
    return new NoopResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NoopResult {
    return new NoopResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NoopResult {
    return new NoopResult().fromJsonString(jsonString, options);
  }

  static equals(a: NoopResult | PlainMessage<NoopResult> | undefined, b: NoopResult | PlainMessage<NoopResult> | undefined): boolean {
    return proto3.util.equals(NoopResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Serialize
 */
export class Serialize extends Message<Serialize> {
  /**
   * @generated from field: flowstate.v1.StateRef serializable_state_ref = 1;
   */
  serializableStateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 2;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<Serialize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Serialize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serializable_state_ref", kind: "message", T: StateRef },
    { no: 2, name: "state_ref", kind: "message", T: StateRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Serialize {
    return new Serialize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Serialize {
    return new Serialize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Serialize {
    return new Serialize().fromJsonString(jsonString, options);
  }

  static equals(a: Serialize | PlainMessage<Serialize> | undefined, b: Serialize | PlainMessage<Serialize> | undefined): boolean {
    return proto3.util.equals(Serialize, a, b);
  }
}

/**
 * @generated from message flowstate.v1.SerializeResult
 */
export class SerializeResult extends Message<SerializeResult> {
  /**
   * @generated from field: flowstate.v1.StateRef serializable_state_ref = 1;
   */
  serializableStateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 2;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<SerializeResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.SerializeResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serializable_state_ref", kind: "message", T: StateRef },
    { no: 2, name: "state_ref", kind: "message", T: StateRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerializeResult {
    return new SerializeResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerializeResult {
    return new SerializeResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerializeResult {
    return new SerializeResult().fromJsonString(jsonString, options);
  }

  static equals(a: SerializeResult | PlainMessage<SerializeResult> | undefined, b: SerializeResult | PlainMessage<SerializeResult> | undefined): boolean {
    return proto3.util.equals(SerializeResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.Deserialize
 */
export class Deserialize extends Message<Deserialize> {
  /**
   * @generated from field: flowstate.v1.StateRef deserialized_state_ref = 1;
   */
  deserializedStateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 2;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<Deserialize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.Deserialize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deserialized_state_ref", kind: "message", T: StateRef },
    { no: 2, name: "state_ref", kind: "message", T: StateRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deserialize {
    return new Deserialize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deserialize {
    return new Deserialize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deserialize {
    return new Deserialize().fromJsonString(jsonString, options);
  }

  static equals(a: Deserialize | PlainMessage<Deserialize> | undefined, b: Deserialize | PlainMessage<Deserialize> | undefined): boolean {
    return proto3.util.equals(Deserialize, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DeserializeResult
 */
export class DeserializeResult extends Message<DeserializeResult> {
  /**
   * @generated from field: flowstate.v1.StateRef deserialized_state_ref = 1;
   */
  deserializedStateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 2;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<DeserializeResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DeserializeResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deserialized_state_ref", kind: "message", T: StateRef },
    { no: 2, name: "state_ref", kind: "message", T: StateRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeserializeResult {
    return new DeserializeResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeserializeResult {
    return new DeserializeResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeserializeResult {
    return new DeserializeResult().fromJsonString(jsonString, options);
  }

  static equals(a: DeserializeResult | PlainMessage<DeserializeResult> | undefined, b: DeserializeResult | PlainMessage<DeserializeResult> | undefined): boolean {
    return proto3.util.equals(DeserializeResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.ReferenceData
 */
export class ReferenceData extends Message<ReferenceData> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 2;
   */
  dataRef?: DataRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<ReferenceData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.ReferenceData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "data_ref", kind: "message", T: DataRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReferenceData {
    return new ReferenceData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReferenceData {
    return new ReferenceData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReferenceData {
    return new ReferenceData().fromJsonString(jsonString, options);
  }

  static equals(a: ReferenceData | PlainMessage<ReferenceData> | undefined, b: ReferenceData | PlainMessage<ReferenceData> | undefined): boolean {
    return proto3.util.equals(ReferenceData, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DereferenceDataResult
 */
export class DereferenceDataResult extends Message<DereferenceDataResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 2;
   */
  dataRef?: DataRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<DereferenceDataResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DereferenceDataResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "data_ref", kind: "message", T: DataRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DereferenceDataResult {
    return new DereferenceDataResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DereferenceDataResult {
    return new DereferenceDataResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DereferenceDataResult {
    return new DereferenceDataResult().fromJsonString(jsonString, options);
  }

  static equals(a: DereferenceDataResult | PlainMessage<DereferenceDataResult> | undefined, b: DereferenceDataResult | PlainMessage<DereferenceDataResult> | undefined): boolean {
    return proto3.util.equals(DereferenceDataResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DereferenceData
 */
export class DereferenceData extends Message<DereferenceData> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 2;
   */
  dataRef?: DataRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<DereferenceData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DereferenceData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "data_ref", kind: "message", T: DataRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DereferenceData {
    return new DereferenceData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DereferenceData {
    return new DereferenceData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DereferenceData {
    return new DereferenceData().fromJsonString(jsonString, options);
  }

  static equals(a: DereferenceData | PlainMessage<DereferenceData> | undefined, b: DereferenceData | PlainMessage<DereferenceData> | undefined): boolean {
    return proto3.util.equals(DereferenceData, a, b);
  }
}

/**
 * @generated from message flowstate.v1.ReferenceDataResult
 */
export class ReferenceDataResult extends Message<ReferenceDataResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 1;
   */
  stateRef?: StateRef;

  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 2;
   */
  dataRef?: DataRef;

  /**
   * @generated from field: string annotation = 3;
   */
  annotation = "";

  constructor(data?: PartialMessage<ReferenceDataResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.ReferenceDataResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state_ref", kind: "message", T: StateRef },
    { no: 2, name: "data_ref", kind: "message", T: DataRef },
    { no: 3, name: "annotation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReferenceDataResult {
    return new ReferenceDataResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReferenceDataResult {
    return new ReferenceDataResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReferenceDataResult {
    return new ReferenceDataResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReferenceDataResult | PlainMessage<ReferenceDataResult> | undefined, b: ReferenceDataResult | PlainMessage<ReferenceDataResult> | undefined): boolean {
    return proto3.util.equals(ReferenceDataResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetData
 */
export class GetData extends Message<GetData> {
  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 1;
   */
  dataRef?: DataRef;

  constructor(data?: PartialMessage<GetData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ref", kind: "message", T: DataRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetData {
    return new GetData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetData {
    return new GetData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetData {
    return new GetData().fromJsonString(jsonString, options);
  }

  static equals(a: GetData | PlainMessage<GetData> | undefined, b: GetData | PlainMessage<GetData> | undefined): boolean {
    return proto3.util.equals(GetData, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetDataResult
 */
export class GetDataResult extends Message<GetDataResult> {
  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 1;
   */
  dataRef?: DataRef;

  constructor(data?: PartialMessage<GetDataResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetDataResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ref", kind: "message", T: DataRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataResult {
    return new GetDataResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataResult {
    return new GetDataResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataResult {
    return new GetDataResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataResult | PlainMessage<GetDataResult> | undefined, b: GetDataResult | PlainMessage<GetDataResult> | undefined): boolean {
    return proto3.util.equals(GetDataResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.StoreData
 */
export class StoreData extends Message<StoreData> {
  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 1;
   */
  dataRef?: DataRef;

  constructor(data?: PartialMessage<StoreData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.StoreData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ref", kind: "message", T: DataRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreData {
    return new StoreData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreData {
    return new StoreData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreData {
    return new StoreData().fromJsonString(jsonString, options);
  }

  static equals(a: StoreData | PlainMessage<StoreData> | undefined, b: StoreData | PlainMessage<StoreData> | undefined): boolean {
    return proto3.util.equals(StoreData, a, b);
  }
}

/**
 * @generated from message flowstate.v1.StoreDataResult
 */
export class StoreDataResult extends Message<StoreDataResult> {
  /**
   * @generated from field: flowstate.v1.DataRef data_ref = 1;
   */
  dataRef?: DataRef;

  constructor(data?: PartialMessage<StoreDataResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.StoreDataResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ref", kind: "message", T: DataRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreDataResult {
    return new StoreDataResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreDataResult {
    return new StoreDataResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreDataResult {
    return new StoreDataResult().fromJsonString(jsonString, options);
  }

  static equals(a: StoreDataResult | PlainMessage<StoreDataResult> | undefined, b: StoreDataResult | PlainMessage<StoreDataResult> | undefined): boolean {
    return proto3.util.equals(StoreDataResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetStateByID
 */
export class GetStateByID extends Message<GetStateByID> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 rev = 2;
   */
  rev = protoInt64.zero;

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 4;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<GetStateByID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetStateByID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rev", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStateByID {
    return new GetStateByID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStateByID {
    return new GetStateByID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStateByID {
    return new GetStateByID().fromJsonString(jsonString, options);
  }

  static equals(a: GetStateByID | PlainMessage<GetStateByID> | undefined, b: GetStateByID | PlainMessage<GetStateByID> | undefined): boolean {
    return proto3.util.equals(GetStateByID, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetStateByIDResult
 */
export class GetStateByIDResult extends Message<GetStateByIDResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 4;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<GetStateByIDResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetStateByIDResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStateByIDResult {
    return new GetStateByIDResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStateByIDResult {
    return new GetStateByIDResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStateByIDResult {
    return new GetStateByIDResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetStateByIDResult | PlainMessage<GetStateByIDResult> | undefined, b: GetStateByIDResult | PlainMessage<GetStateByIDResult> | undefined): boolean {
    return proto3.util.equals(GetStateByIDResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetStateByLabels
 */
export class GetStateByLabels extends Message<GetStateByLabels> {
  /**
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 4;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<GetStateByLabels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetStateByLabels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStateByLabels {
    return new GetStateByLabels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStateByLabels {
    return new GetStateByLabels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStateByLabels {
    return new GetStateByLabels().fromJsonString(jsonString, options);
  }

  static equals(a: GetStateByLabels | PlainMessage<GetStateByLabels> | undefined, b: GetStateByLabels | PlainMessage<GetStateByLabels> | undefined): boolean {
    return proto3.util.equals(GetStateByLabels, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetStateByLabelsResult
 */
export class GetStateByLabelsResult extends Message<GetStateByLabelsResult> {
  /**
   * @generated from field: flowstate.v1.StateRef state_ref = 4;
   */
  stateRef?: StateRef;

  constructor(data?: PartialMessage<GetStateByLabelsResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetStateByLabelsResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "state_ref", kind: "message", T: StateRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStateByLabelsResult {
    return new GetStateByLabelsResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStateByLabelsResult {
    return new GetStateByLabelsResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStateByLabelsResult {
    return new GetStateByLabelsResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetStateByLabelsResult | PlainMessage<GetStateByLabelsResult> | undefined, b: GetStateByLabelsResult | PlainMessage<GetStateByLabelsResult> | undefined): boolean {
    return proto3.util.equals(GetStateByLabelsResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetStates
 */
export class GetStates extends Message<GetStates> {
  /**
   * @generated from field: int64 since_rev = 1;
   */
  sinceRev = protoInt64.zero;

  /**
   * unix milliseconds
   *
   * @generated from field: int64 since_time_usec = 2;
   */
  sinceTimeUsec = protoInt64.zero;

  /**
   * @generated from field: repeated flowstate.v1.GetStates.Labels labels = 3;
   */
  labels: GetStates_Labels[] = [];

  /**
   * @generated from field: bool latest_only = 4;
   */
  latestOnly = false;

  /**
   * @generated from field: int64 limit = 5;
   */
  limit = protoInt64.zero;

  constructor(data?: PartialMessage<GetStates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetStates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "since_rev", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "since_time_usec", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "labels", kind: "message", T: GetStates_Labels, repeated: true },
    { no: 4, name: "latest_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStates {
    return new GetStates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStates {
    return new GetStates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStates {
    return new GetStates().fromJsonString(jsonString, options);
  }

  static equals(a: GetStates | PlainMessage<GetStates> | undefined, b: GetStates | PlainMessage<GetStates> | undefined): boolean {
    return proto3.util.equals(GetStates, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetStates.Labels
 */
export class GetStates_Labels extends Message<GetStates_Labels> {
  /**
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetStates_Labels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetStates.Labels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStates_Labels {
    return new GetStates_Labels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStates_Labels {
    return new GetStates_Labels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStates_Labels {
    return new GetStates_Labels().fromJsonString(jsonString, options);
  }

  static equals(a: GetStates_Labels | PlainMessage<GetStates_Labels> | undefined, b: GetStates_Labels | PlainMessage<GetStates_Labels> | undefined): boolean {
    return proto3.util.equals(GetStates_Labels, a, b);
  }
}

/**
 * @generated from message flowstate.v1.DelayedState
 */
export class DelayedState extends Message<DelayedState> {
  /**
   * @generated from field: flowstate.v1.State state = 1;
   */
  state?: State;

  /**
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: int64 execute_at_sec = 3;
   */
  executeAtSec = protoInt64.zero;

  constructor(data?: PartialMessage<DelayedState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.DelayedState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: State },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "execute_at_sec", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelayedState {
    return new DelayedState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelayedState {
    return new DelayedState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelayedState {
    return new DelayedState().fromJsonString(jsonString, options);
  }

  static equals(a: DelayedState | PlainMessage<DelayedState> | undefined, b: DelayedState | PlainMessage<DelayedState> | undefined): boolean {
    return proto3.util.equals(DelayedState, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetStatesResult
 */
export class GetStatesResult extends Message<GetStatesResult> {
  /**
   * @generated from field: repeated flowstate.v1.State states = 1;
   */
  states: State[] = [];

  /**
   * @generated from field: bool more = 2;
   */
  more = false;

  constructor(data?: PartialMessage<GetStatesResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetStatesResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "states", kind: "message", T: State, repeated: true },
    { no: 2, name: "more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatesResult {
    return new GetStatesResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatesResult {
    return new GetStatesResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatesResult {
    return new GetStatesResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatesResult | PlainMessage<GetStatesResult> | undefined, b: GetStatesResult | PlainMessage<GetStatesResult> | undefined): boolean {
    return proto3.util.equals(GetStatesResult, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetDelayedStates
 */
export class GetDelayedStates extends Message<GetDelayedStates> {
  /**
   * @generated from field: int64 since_time_sec = 1;
   */
  sinceTimeSec = protoInt64.zero;

  /**
   * @generated from field: int64 until_time_sec = 2;
   */
  untilTimeSec = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: int64 limit = 4;
   */
  limit = protoInt64.zero;

  constructor(data?: PartialMessage<GetDelayedStates>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetDelayedStates";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "since_time_sec", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "until_time_sec", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDelayedStates {
    return new GetDelayedStates().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDelayedStates {
    return new GetDelayedStates().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDelayedStates {
    return new GetDelayedStates().fromJsonString(jsonString, options);
  }

  static equals(a: GetDelayedStates | PlainMessage<GetDelayedStates> | undefined, b: GetDelayedStates | PlainMessage<GetDelayedStates> | undefined): boolean {
    return proto3.util.equals(GetDelayedStates, a, b);
  }
}

/**
 * @generated from message flowstate.v1.GetDelayedStatesResult
 */
export class GetDelayedStatesResult extends Message<GetDelayedStatesResult> {
  /**
   * @generated from field: repeated flowstate.v1.DelayedState delayed_states = 1;
   */
  delayedStates: DelayedState[] = [];

  /**
   * @generated from field: bool more = 2;
   */
  more = false;

  constructor(data?: PartialMessage<GetDelayedStatesResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flowstate.v1.GetDelayedStatesResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delayed_states", kind: "message", T: DelayedState, repeated: true },
    { no: 2, name: "more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDelayedStatesResult {
    return new GetDelayedStatesResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDelayedStatesResult {
    return new GetDelayedStatesResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDelayedStatesResult {
    return new GetDelayedStatesResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetDelayedStatesResult | PlainMessage<GetDelayedStatesResult> | undefined, b: GetDelayedStatesResult | PlainMessage<GetDelayedStatesResult> | undefined): boolean {
    return proto3.util.equals(GetDelayedStatesResult, a, b);
  }
}

