// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: flowstate/v1/messages.proto

package flowstatev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rev                  int64             `protobuf:"varint,2,opt,name=rev,proto3" json:"rev,omitempty"`
	Annotations          map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CommittedAtUnixMilli int64             `protobuf:"varint,5,opt,name=committed_at_unix_milli,json=committedAtUnixMilli,proto3" json:"committed_at_unix_milli,omitempty"`
	Transition           *Transition       `protobuf:"bytes,6,opt,name=transition,proto3" json:"transition,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{0}
}

func (x *State) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *State) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

func (x *State) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *State) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *State) GetCommittedAtUnixMilli() int64 {
	if x != nil {
		return x.CommittedAtUnixMilli
	}
	return 0
}

func (x *State) GetTransition() *Transition {
	if x != nil {
		return x.Transition
	}
	return nil
}

type StateCtx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Committed   *State        `protobuf:"bytes,1,opt,name=committed,proto3" json:"committed,omitempty"`
	Current     *State        `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	Transitions []*Transition `protobuf:"bytes,3,rep,name=transitions,proto3" json:"transitions,omitempty"`
}

func (x *StateCtx) Reset() {
	*x = StateCtx{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateCtx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCtx) ProtoMessage() {}

func (x *StateCtx) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCtx.ProtoReflect.Descriptor instead.
func (*StateCtx) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{1}
}

func (x *StateCtx) GetCommitted() *State {
	if x != nil {
		return x.Committed
	}
	return nil
}

func (x *StateCtx) GetCurrent() *State {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *StateCtx) GetTransitions() []*Transition {
	if x != nil {
		return x.Transitions
	}
	return nil
}

type StateRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rev int64  `protobuf:"varint,2,opt,name=rev,proto3" json:"rev,omitempty"`
}

func (x *StateRef) Reset() {
	*x = StateRef{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateRef) ProtoMessage() {}

func (x *StateRef) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateRef.ProtoReflect.Descriptor instead.
func (*StateRef) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{2}
}

func (x *StateRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StateRef) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

type DelayedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Offset       int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ExecuteAtSec int64  `protobuf:"varint,3,opt,name=execute_at_sec,json=executeAtSec,proto3" json:"execute_at_sec,omitempty"`
}

func (x *DelayedState) Reset() {
	*x = DelayedState{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelayedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayedState) ProtoMessage() {}

func (x *DelayedState) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayedState.ProtoReflect.Descriptor instead.
func (*DelayedState) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{3}
}

func (x *DelayedState) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DelayedState) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DelayedState) GetExecuteAtSec() int64 {
	if x != nil {
		return x.ExecuteAtSec
	}
	return 0
}

type Transition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        string            `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To          string            `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Transition) Reset() {
	*x = Transition{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transition) ProtoMessage() {}

func (x *Transition) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transition.ProtoReflect.Descriptor instead.
func (*Transition) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{4}
}

func (x *Transition) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transition) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transition) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rev    int64  `protobuf:"varint,2,opt,name=rev,proto3" json:"rev,omitempty"`
	Binary bool   `protobuf:"varint,3,opt,name=binary,proto3" json:"binary,omitempty"`
	B      string `protobuf:"bytes,4,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{5}
}

func (x *Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Data) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

func (x *Data) GetBinary() bool {
	if x != nil {
		return x.Binary
	}
	return false
}

func (x *Data) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

type DataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rev int64  `protobuf:"varint,2,opt,name=rev,proto3" json:"rev,omitempty"`
}

func (x *DataRef) Reset() {
	*x = DataRef{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRef) ProtoMessage() {}

func (x *DataRef) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRef.ProtoReflect.Descriptor instead.
func (*DataRef) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{6}
}

func (x *DataRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataRef) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateCtxs        []*StateCtx              `protobuf:"bytes,1,rep,name=state_ctxs,json=stateCtxs,proto3" json:"state_ctxs,omitempty"`
	Datas            []*Data                  `protobuf:"bytes,2,rep,name=datas,proto3" json:"datas,omitempty"`
	Transit          *TransitCommand          `protobuf:"bytes,3,opt,name=transit,proto3" json:"transit,omitempty"`
	Pause            *PauseCommand            `protobuf:"bytes,4,opt,name=pause,proto3" json:"pause,omitempty"`
	Resume           *ResumeCommand           `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
	End              *EndCommand              `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	Execute          *ExecuteCommand          `protobuf:"bytes,7,opt,name=execute,proto3" json:"execute,omitempty"`
	Delay            *DelayCommand            `protobuf:"bytes,8,opt,name=delay,proto3" json:"delay,omitempty"`
	Commit           *CommitCommand           `protobuf:"bytes,9,opt,name=commit,proto3" json:"commit,omitempty"`
	Noop             *NoopCommand             `protobuf:"bytes,10,opt,name=noop,proto3" json:"noop,omitempty"`
	Stack            *StackCommand            `protobuf:"bytes,11,opt,name=stack,proto3" json:"stack,omitempty"`
	Unstack          *UnstackCommand          `protobuf:"bytes,12,opt,name=unstack,proto3" json:"unstack,omitempty"`
	AttachData       *AttachDataCommand       `protobuf:"bytes,13,opt,name=attach_data,json=attachData,proto3" json:"attach_data,omitempty"`
	GetData          *GetDataCommand          `protobuf:"bytes,14,opt,name=get_data,json=getData,proto3" json:"get_data,omitempty"`
	GetStateById     *GetStateByIDCommand     `protobuf:"bytes,17,opt,name=get_state_by_id,json=getStateById,proto3" json:"get_state_by_id,omitempty"`
	GetStateByLabels *GetStateByLabelsCommand `protobuf:"bytes,18,opt,name=get_state_by_labels,json=getStateByLabels,proto3" json:"get_state_by_labels,omitempty"`
	GetStates        *GetStatesCommand        `protobuf:"bytes,19,opt,name=get_states,json=getStates,proto3" json:"get_states,omitempty"`
	GetDelayedStates *GetDelayedStatesCommand `protobuf:"bytes,20,opt,name=get_delayed_states,json=getDelayedStates,proto3" json:"get_delayed_states,omitempty"`
	CommitState      *CommitStateCtxCommand   `protobuf:"bytes,21,opt,name=commit_state,json=commitState,proto3" json:"commit_state,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{7}
}

func (x *Command) GetStateCtxs() []*StateCtx {
	if x != nil {
		return x.StateCtxs
	}
	return nil
}

func (x *Command) GetDatas() []*Data {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *Command) GetTransit() *TransitCommand {
	if x != nil {
		return x.Transit
	}
	return nil
}

func (x *Command) GetPause() *PauseCommand {
	if x != nil {
		return x.Pause
	}
	return nil
}

func (x *Command) GetResume() *ResumeCommand {
	if x != nil {
		return x.Resume
	}
	return nil
}

func (x *Command) GetEnd() *EndCommand {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Command) GetExecute() *ExecuteCommand {
	if x != nil {
		return x.Execute
	}
	return nil
}

func (x *Command) GetDelay() *DelayCommand {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *Command) GetCommit() *CommitCommand {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *Command) GetNoop() *NoopCommand {
	if x != nil {
		return x.Noop
	}
	return nil
}

func (x *Command) GetStack() *StackCommand {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *Command) GetUnstack() *UnstackCommand {
	if x != nil {
		return x.Unstack
	}
	return nil
}

func (x *Command) GetAttachData() *AttachDataCommand {
	if x != nil {
		return x.AttachData
	}
	return nil
}

func (x *Command) GetGetData() *GetDataCommand {
	if x != nil {
		return x.GetData
	}
	return nil
}

func (x *Command) GetGetStateById() *GetStateByIDCommand {
	if x != nil {
		return x.GetStateById
	}
	return nil
}

func (x *Command) GetGetStateByLabels() *GetStateByLabelsCommand {
	if x != nil {
		return x.GetStateByLabels
	}
	return nil
}

func (x *Command) GetGetStates() *GetStatesCommand {
	if x != nil {
		return x.GetStates
	}
	return nil
}

func (x *Command) GetGetDelayedStates() *GetDelayedStatesCommand {
	if x != nil {
		return x.GetDelayedStates
	}
	return nil
}

func (x *Command) GetCommitState() *CommitStateCtxCommand {
	if x != nil {
		return x.CommitState
	}
	return nil
}

type TransitCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	FlowId   string    `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
}

func (x *TransitCommand) Reset() {
	*x = TransitCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransitCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitCommand) ProtoMessage() {}

func (x *TransitCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitCommand.ProtoReflect.Descriptor instead.
func (*TransitCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{8}
}

func (x *TransitCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *TransitCommand) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type PauseCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	FlowId   string    `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
}

func (x *PauseCommand) Reset() {
	*x = PauseCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseCommand) ProtoMessage() {}

func (x *PauseCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseCommand.ProtoReflect.Descriptor instead.
func (*PauseCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{9}
}

func (x *PauseCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *PauseCommand) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type ResumeCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *ResumeCommand) Reset() {
	*x = ResumeCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeCommand) ProtoMessage() {}

func (x *ResumeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeCommand.ProtoReflect.Descriptor instead.
func (*ResumeCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{10}
}

func (x *ResumeCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type EndCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *EndCommand) Reset() {
	*x = EndCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndCommand) ProtoMessage() {}

func (x *EndCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndCommand.ProtoReflect.Descriptor instead.
func (*EndCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{11}
}

func (x *EndCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type ExecuteCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *ExecuteCommand) Reset() {
	*x = ExecuteCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommand) ProtoMessage() {}

func (x *ExecuteCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommand.ProtoReflect.Descriptor instead.
func (*ExecuteCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{12}
}

func (x *ExecuteCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type DelayCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef      *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	DelayingState *State    `protobuf:"bytes,2,opt,name=delaying_state,json=delayingState,proto3" json:"delaying_state,omitempty"`
	ExecuteAtSec  int64     `protobuf:"varint,3,opt,name=execute_at_sec,json=executeAtSec,proto3" json:"execute_at_sec,omitempty"`
	Commit        bool      `protobuf:"varint,4,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *DelayCommand) Reset() {
	*x = DelayCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelayCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayCommand) ProtoMessage() {}

func (x *DelayCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayCommand.ProtoReflect.Descriptor instead.
func (*DelayCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{13}
}

func (x *DelayCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *DelayCommand) GetDelayingState() *State {
	if x != nil {
		return x.DelayingState
	}
	return nil
}

func (x *DelayCommand) GetExecuteAtSec() int64 {
	if x != nil {
		return x.ExecuteAtSec
	}
	return 0
}

func (x *DelayCommand) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

type CommitCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []*Command `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *CommitCommand) Reset() {
	*x = CommitCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCommand) ProtoMessage() {}

func (x *CommitCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCommand.ProtoReflect.Descriptor instead.
func (*CommitCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{14}
}

func (x *CommitCommand) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

type NoopCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *NoopCommand) Reset() {
	*x = NoopCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoopCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoopCommand) ProtoMessage() {}

func (x *NoopCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoopCommand.ProtoReflect.Descriptor instead.
func (*NoopCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{15}
}

func (x *NoopCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type StackCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierStateRef *StateRef `protobuf:"bytes,1,opt,name=carrier_state_ref,json=carrierStateRef,proto3" json:"carrier_state_ref,omitempty"`
	StackStateRef   *StateRef `protobuf:"bytes,2,opt,name=stack_state_ref,json=stackStateRef,proto3" json:"stack_state_ref,omitempty"`
	Annotation      string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *StackCommand) Reset() {
	*x = StackCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackCommand) ProtoMessage() {}

func (x *StackCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackCommand.ProtoReflect.Descriptor instead.
func (*StackCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{16}
}

func (x *StackCommand) GetCarrierStateRef() *StateRef {
	if x != nil {
		return x.CarrierStateRef
	}
	return nil
}

func (x *StackCommand) GetStackStateRef() *StateRef {
	if x != nil {
		return x.StackStateRef
	}
	return nil
}

func (x *StackCommand) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type UnstackCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierStateRef *StateRef `protobuf:"bytes,1,opt,name=carrier_state_ref,json=carrierStateRef,proto3" json:"carrier_state_ref,omitempty"`
	UnstackStateRef *StateRef `protobuf:"bytes,2,opt,name=unstack_state_ref,json=unstackStateRef,proto3" json:"unstack_state_ref,omitempty"`
	Annotation      string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *UnstackCommand) Reset() {
	*x = UnstackCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnstackCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstackCommand) ProtoMessage() {}

func (x *UnstackCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstackCommand.ProtoReflect.Descriptor instead.
func (*UnstackCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{17}
}

func (x *UnstackCommand) GetCarrierStateRef() *StateRef {
	if x != nil {
		return x.CarrierStateRef
	}
	return nil
}

func (x *UnstackCommand) GetUnstackStateRef() *StateRef {
	if x != nil {
		return x.UnstackStateRef
	}
	return nil
}

func (x *UnstackCommand) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type AttachDataCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	DataRef  *DataRef  `protobuf:"bytes,2,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
	Alias    string    `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Commit   bool      `protobuf:"varint,4,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *AttachDataCommand) Reset() {
	*x = AttachDataCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachDataCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachDataCommand) ProtoMessage() {}

func (x *AttachDataCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachDataCommand.ProtoReflect.Descriptor instead.
func (*AttachDataCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{18}
}

func (x *AttachDataCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *AttachDataCommand) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

func (x *AttachDataCommand) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AttachDataCommand) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

type GetDataCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	DataRef  *DataRef  `protobuf:"bytes,2,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
	Alias    string    `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *GetDataCommand) Reset() {
	*x = GetDataCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataCommand) ProtoMessage() {}

func (x *GetDataCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataCommand.ProtoReflect.Descriptor instead.
func (*GetDataCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{19}
}

func (x *GetDataCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *GetDataCommand) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

func (x *GetDataCommand) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type GetStateByIDCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rev      int64     `protobuf:"varint,2,opt,name=rev,proto3" json:"rev,omitempty"`
	StateRef *StateRef `protobuf:"bytes,3,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *GetStateByIDCommand) Reset() {
	*x = GetStateByIDCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStateByIDCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateByIDCommand) ProtoMessage() {}

func (x *GetStateByIDCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateByIDCommand.ProtoReflect.Descriptor instead.
func (*GetStateByIDCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{20}
}

func (x *GetStateByIDCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetStateByIDCommand) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

func (x *GetStateByIDCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type GetStateByLabelsCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels   map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StateRef *StateRef         `protobuf:"bytes,2,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *GetStateByLabelsCommand) Reset() {
	*x = GetStateByLabelsCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStateByLabelsCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateByLabelsCommand) ProtoMessage() {}

func (x *GetStateByLabelsCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateByLabelsCommand.ProtoReflect.Descriptor instead.
func (*GetStateByLabelsCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{21}
}

func (x *GetStateByLabelsCommand) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetStateByLabelsCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type GetStatesCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinceRev      int64                      `protobuf:"varint,1,opt,name=since_rev,json=sinceRev,proto3" json:"since_rev,omitempty"`
	SinceTimeUsec int64                      `protobuf:"varint,2,opt,name=since_time_usec,json=sinceTimeUsec,proto3" json:"since_time_usec,omitempty"`
	Labels        []*GetStatesCommand_Labels `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	LatestOnly    bool                       `protobuf:"varint,4,opt,name=latest_only,json=latestOnly,proto3" json:"latest_only,omitempty"`
	Limit         int64                      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Result        *GetStatesResult           `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetStatesCommand) Reset() {
	*x = GetStatesCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatesCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatesCommand) ProtoMessage() {}

func (x *GetStatesCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatesCommand.ProtoReflect.Descriptor instead.
func (*GetStatesCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{22}
}

func (x *GetStatesCommand) GetSinceRev() int64 {
	if x != nil {
		return x.SinceRev
	}
	return 0
}

func (x *GetStatesCommand) GetSinceTimeUsec() int64 {
	if x != nil {
		return x.SinceTimeUsec
	}
	return 0
}

func (x *GetStatesCommand) GetLabels() []*GetStatesCommand_Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetStatesCommand) GetLatestOnly() bool {
	if x != nil {
		return x.LatestOnly
	}
	return false
}

func (x *GetStatesCommand) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetStatesCommand) GetResult() *GetStatesResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetStatesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*State `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	More   bool     `protobuf:"varint,2,opt,name=more,proto3" json:"more,omitempty"`
}

func (x *GetStatesResult) Reset() {
	*x = GetStatesResult{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatesResult) ProtoMessage() {}

func (x *GetStatesResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatesResult.ProtoReflect.Descriptor instead.
func (*GetStatesResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{23}
}

func (x *GetStatesResult) GetStates() []*State {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *GetStatesResult) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

type GetDelayedStatesCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinceTimeSec int64                   `protobuf:"varint,1,opt,name=since_time_sec,json=sinceTimeSec,proto3" json:"since_time_sec,omitempty"`
	UntilTimeSec int64                   `protobuf:"varint,2,opt,name=until_time_sec,json=untilTimeSec,proto3" json:"until_time_sec,omitempty"`
	Offset       int64                   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int64                   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Result       *GetDelayedStatesResult `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetDelayedStatesCommand) Reset() {
	*x = GetDelayedStatesCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDelayedStatesCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelayedStatesCommand) ProtoMessage() {}

func (x *GetDelayedStatesCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelayedStatesCommand.ProtoReflect.Descriptor instead.
func (*GetDelayedStatesCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{24}
}

func (x *GetDelayedStatesCommand) GetSinceTimeSec() int64 {
	if x != nil {
		return x.SinceTimeSec
	}
	return 0
}

func (x *GetDelayedStatesCommand) GetUntilTimeSec() int64 {
	if x != nil {
		return x.UntilTimeSec
	}
	return 0
}

func (x *GetDelayedStatesCommand) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDelayedStatesCommand) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDelayedStatesCommand) GetResult() *GetDelayedStatesResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetDelayedStatesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelayedStates []*DelayedState `protobuf:"bytes,1,rep,name=delayed_states,json=delayedStates,proto3" json:"delayed_states,omitempty"`
	More          bool            `protobuf:"varint,2,opt,name=more,proto3" json:"more,omitempty"`
}

func (x *GetDelayedStatesResult) Reset() {
	*x = GetDelayedStatesResult{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDelayedStatesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelayedStatesResult) ProtoMessage() {}

func (x *GetDelayedStatesResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelayedStatesResult.ProtoReflect.Descriptor instead.
func (*GetDelayedStatesResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{25}
}

func (x *GetDelayedStatesResult) GetDelayedStates() []*DelayedState {
	if x != nil {
		return x.DelayedStates
	}
	return nil
}

func (x *GetDelayedStatesResult) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

type CommitStateCtxCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *CommitStateCtxCommand) Reset() {
	*x = CommitStateCtxCommand{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitStateCtxCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStateCtxCommand) ProtoMessage() {}

func (x *CommitStateCtxCommand) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStateCtxCommand.ProtoReflect.Descriptor instead.
func (*CommitStateCtxCommand) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{26}
}

func (x *CommitStateCtxCommand) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type GetStatesCommand_Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStatesCommand_Labels) Reset() {
	*x = GetStatesCommand_Labels{}
	mi := &file_flowstate_v1_messages_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatesCommand_Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatesCommand_Labels) ProtoMessage() {}

func (x *GetStatesCommand_Labels) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_messages_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatesCommand_Labels.ProtoReflect.Descriptor instead.
func (*GetStatesCommand_Labels) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_messages_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GetStatesCommand_Labels) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_flowstate_v1_messages_proto protoreflect.FileDescriptor

var file_flowstate_v1_messages_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x96, 0x03, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x37, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x12,
	0x38, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x74,
	0x78, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x2c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x76, 0x22, 0x77, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x41, 0x74, 0x53, 0x65, 0x63, 0x22, 0xbd, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x76,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x62, 0x22, 0x2b, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x72, 0x65, 0x76, 0x22, 0xe4, 0x08, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x74, 0x78, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x74, 0x78, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x12, 0x36, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x6f,
	0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x07, 0x75,
	0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x75, 0x6e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x10, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d,
	0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x09, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x53, 0x0a,
	0x12, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x10, 0x67, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x74, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x0c, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x41,
	0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x22, 0x45, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x3a,
	0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x74, 0x53, 0x65, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x42, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x0b,
	0x4e, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x42, 0x0a, 0x11,
	0x75, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x0f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa8, 0x01, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x6c, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x72, 0x65, 0x76, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0xd4, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x95, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x76, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x8e, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0xd1, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x24,
	0x0a, 0x0e, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72,
	0x65, 0x22, 0x4c, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x74, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x42,
	0xb5, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x61, 0x6b, 0x61, 0x73, 0x69, 0x6d, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x72, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02,
	0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flowstate_v1_messages_proto_rawDescOnce sync.Once
	file_flowstate_v1_messages_proto_rawDescData = file_flowstate_v1_messages_proto_rawDesc
)

func file_flowstate_v1_messages_proto_rawDescGZIP() []byte {
	file_flowstate_v1_messages_proto_rawDescOnce.Do(func() {
		file_flowstate_v1_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_flowstate_v1_messages_proto_rawDescData)
	})
	return file_flowstate_v1_messages_proto_rawDescData
}

var file_flowstate_v1_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_flowstate_v1_messages_proto_goTypes = []any{
	(*State)(nil),                   // 0: flowstate.v1.State
	(*StateCtx)(nil),                // 1: flowstate.v1.StateCtx
	(*StateRef)(nil),                // 2: flowstate.v1.StateRef
	(*DelayedState)(nil),            // 3: flowstate.v1.DelayedState
	(*Transition)(nil),              // 4: flowstate.v1.Transition
	(*Data)(nil),                    // 5: flowstate.v1.Data
	(*DataRef)(nil),                 // 6: flowstate.v1.DataRef
	(*Command)(nil),                 // 7: flowstate.v1.Command
	(*TransitCommand)(nil),          // 8: flowstate.v1.TransitCommand
	(*PauseCommand)(nil),            // 9: flowstate.v1.PauseCommand
	(*ResumeCommand)(nil),           // 10: flowstate.v1.ResumeCommand
	(*EndCommand)(nil),              // 11: flowstate.v1.EndCommand
	(*ExecuteCommand)(nil),          // 12: flowstate.v1.ExecuteCommand
	(*DelayCommand)(nil),            // 13: flowstate.v1.DelayCommand
	(*CommitCommand)(nil),           // 14: flowstate.v1.CommitCommand
	(*NoopCommand)(nil),             // 15: flowstate.v1.NoopCommand
	(*StackCommand)(nil),            // 16: flowstate.v1.StackCommand
	(*UnstackCommand)(nil),          // 17: flowstate.v1.UnstackCommand
	(*AttachDataCommand)(nil),       // 18: flowstate.v1.AttachDataCommand
	(*GetDataCommand)(nil),          // 19: flowstate.v1.GetDataCommand
	(*GetStateByIDCommand)(nil),     // 20: flowstate.v1.GetStateByIDCommand
	(*GetStateByLabelsCommand)(nil), // 21: flowstate.v1.GetStateByLabelsCommand
	(*GetStatesCommand)(nil),        // 22: flowstate.v1.GetStatesCommand
	(*GetStatesResult)(nil),         // 23: flowstate.v1.GetStatesResult
	(*GetDelayedStatesCommand)(nil), // 24: flowstate.v1.GetDelayedStatesCommand
	(*GetDelayedStatesResult)(nil),  // 25: flowstate.v1.GetDelayedStatesResult
	(*CommitStateCtxCommand)(nil),   // 26: flowstate.v1.CommitStateCtxCommand
	nil,                             // 27: flowstate.v1.State.AnnotationsEntry
	nil,                             // 28: flowstate.v1.State.LabelsEntry
	nil,                             // 29: flowstate.v1.Transition.AnnotationsEntry
	nil,                             // 30: flowstate.v1.GetStateByLabelsCommand.LabelsEntry
	(*GetStatesCommand_Labels)(nil), // 31: flowstate.v1.GetStatesCommand.Labels
	nil,                             // 32: flowstate.v1.GetStatesCommand.Labels.LabelsEntry
}
var file_flowstate_v1_messages_proto_depIdxs = []int32{
	27, // 0: flowstate.v1.State.annotations:type_name -> flowstate.v1.State.AnnotationsEntry
	28, // 1: flowstate.v1.State.labels:type_name -> flowstate.v1.State.LabelsEntry
	4,  // 2: flowstate.v1.State.transition:type_name -> flowstate.v1.Transition
	0,  // 3: flowstate.v1.StateCtx.committed:type_name -> flowstate.v1.State
	0,  // 4: flowstate.v1.StateCtx.current:type_name -> flowstate.v1.State
	4,  // 5: flowstate.v1.StateCtx.transitions:type_name -> flowstate.v1.Transition
	0,  // 6: flowstate.v1.DelayedState.state:type_name -> flowstate.v1.State
	29, // 7: flowstate.v1.Transition.annotations:type_name -> flowstate.v1.Transition.AnnotationsEntry
	1,  // 8: flowstate.v1.Command.state_ctxs:type_name -> flowstate.v1.StateCtx
	5,  // 9: flowstate.v1.Command.datas:type_name -> flowstate.v1.Data
	8,  // 10: flowstate.v1.Command.transit:type_name -> flowstate.v1.TransitCommand
	9,  // 11: flowstate.v1.Command.pause:type_name -> flowstate.v1.PauseCommand
	10, // 12: flowstate.v1.Command.resume:type_name -> flowstate.v1.ResumeCommand
	11, // 13: flowstate.v1.Command.end:type_name -> flowstate.v1.EndCommand
	12, // 14: flowstate.v1.Command.execute:type_name -> flowstate.v1.ExecuteCommand
	13, // 15: flowstate.v1.Command.delay:type_name -> flowstate.v1.DelayCommand
	14, // 16: flowstate.v1.Command.commit:type_name -> flowstate.v1.CommitCommand
	15, // 17: flowstate.v1.Command.noop:type_name -> flowstate.v1.NoopCommand
	16, // 18: flowstate.v1.Command.stack:type_name -> flowstate.v1.StackCommand
	17, // 19: flowstate.v1.Command.unstack:type_name -> flowstate.v1.UnstackCommand
	18, // 20: flowstate.v1.Command.attach_data:type_name -> flowstate.v1.AttachDataCommand
	19, // 21: flowstate.v1.Command.get_data:type_name -> flowstate.v1.GetDataCommand
	20, // 22: flowstate.v1.Command.get_state_by_id:type_name -> flowstate.v1.GetStateByIDCommand
	21, // 23: flowstate.v1.Command.get_state_by_labels:type_name -> flowstate.v1.GetStateByLabelsCommand
	22, // 24: flowstate.v1.Command.get_states:type_name -> flowstate.v1.GetStatesCommand
	24, // 25: flowstate.v1.Command.get_delayed_states:type_name -> flowstate.v1.GetDelayedStatesCommand
	26, // 26: flowstate.v1.Command.commit_state:type_name -> flowstate.v1.CommitStateCtxCommand
	2,  // 27: flowstate.v1.TransitCommand.state_ref:type_name -> flowstate.v1.StateRef
	2,  // 28: flowstate.v1.PauseCommand.state_ref:type_name -> flowstate.v1.StateRef
	2,  // 29: flowstate.v1.ResumeCommand.state_ref:type_name -> flowstate.v1.StateRef
	2,  // 30: flowstate.v1.EndCommand.state_ref:type_name -> flowstate.v1.StateRef
	2,  // 31: flowstate.v1.ExecuteCommand.state_ref:type_name -> flowstate.v1.StateRef
	2,  // 32: flowstate.v1.DelayCommand.state_ref:type_name -> flowstate.v1.StateRef
	0,  // 33: flowstate.v1.DelayCommand.delaying_state:type_name -> flowstate.v1.State
	7,  // 34: flowstate.v1.CommitCommand.commands:type_name -> flowstate.v1.Command
	2,  // 35: flowstate.v1.NoopCommand.state_ref:type_name -> flowstate.v1.StateRef
	2,  // 36: flowstate.v1.StackCommand.carrier_state_ref:type_name -> flowstate.v1.StateRef
	2,  // 37: flowstate.v1.StackCommand.stack_state_ref:type_name -> flowstate.v1.StateRef
	2,  // 38: flowstate.v1.UnstackCommand.carrier_state_ref:type_name -> flowstate.v1.StateRef
	2,  // 39: flowstate.v1.UnstackCommand.unstack_state_ref:type_name -> flowstate.v1.StateRef
	2,  // 40: flowstate.v1.AttachDataCommand.state_ref:type_name -> flowstate.v1.StateRef
	6,  // 41: flowstate.v1.AttachDataCommand.data_ref:type_name -> flowstate.v1.DataRef
	2,  // 42: flowstate.v1.GetDataCommand.state_ref:type_name -> flowstate.v1.StateRef
	6,  // 43: flowstate.v1.GetDataCommand.data_ref:type_name -> flowstate.v1.DataRef
	2,  // 44: flowstate.v1.GetStateByIDCommand.state_ref:type_name -> flowstate.v1.StateRef
	30, // 45: flowstate.v1.GetStateByLabelsCommand.labels:type_name -> flowstate.v1.GetStateByLabelsCommand.LabelsEntry
	2,  // 46: flowstate.v1.GetStateByLabelsCommand.state_ref:type_name -> flowstate.v1.StateRef
	31, // 47: flowstate.v1.GetStatesCommand.labels:type_name -> flowstate.v1.GetStatesCommand.Labels
	23, // 48: flowstate.v1.GetStatesCommand.result:type_name -> flowstate.v1.GetStatesResult
	0,  // 49: flowstate.v1.GetStatesResult.states:type_name -> flowstate.v1.State
	25, // 50: flowstate.v1.GetDelayedStatesCommand.result:type_name -> flowstate.v1.GetDelayedStatesResult
	3,  // 51: flowstate.v1.GetDelayedStatesResult.delayed_states:type_name -> flowstate.v1.DelayedState
	2,  // 52: flowstate.v1.CommitStateCtxCommand.state_ref:type_name -> flowstate.v1.StateRef
	32, // 53: flowstate.v1.GetStatesCommand.Labels.labels:type_name -> flowstate.v1.GetStatesCommand.Labels.LabelsEntry
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_flowstate_v1_messages_proto_init() }
func file_flowstate_v1_messages_proto_init() {
	if File_flowstate_v1_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flowstate_v1_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flowstate_v1_messages_proto_goTypes,
		DependencyIndexes: file_flowstate_v1_messages_proto_depIdxs,
		MessageInfos:      file_flowstate_v1_messages_proto_msgTypes,
	}.Build()
	File_flowstate_v1_messages_proto = out.File
	file_flowstate_v1_messages_proto_rawDesc = nil
	file_flowstate_v1_messages_proto_goTypes = nil
	file_flowstate_v1_messages_proto_depIdxs = nil
}
