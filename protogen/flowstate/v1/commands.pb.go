// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: flowstate/v1/commands.proto

package flowstatev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transit         *Transit         `protobuf:"bytes,1,opt,name=transit,proto3" json:"transit,omitempty"`
	Pause           *Pause           `protobuf:"bytes,2,opt,name=pause,proto3" json:"pause,omitempty"`
	Resume          *Resume          `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	End             *End             `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	Execute         *Execute         `protobuf:"bytes,5,opt,name=execute,proto3" json:"execute,omitempty"`
	Delay           *Delay           `protobuf:"bytes,6,opt,name=delay,proto3" json:"delay,omitempty"`
	Commit          *Commit          `protobuf:"bytes,7,opt,name=commit,proto3" json:"commit,omitempty"`
	Noop            *Noop            `protobuf:"bytes,8,opt,name=noop,proto3" json:"noop,omitempty"`
	Serialize       *Serialize       `protobuf:"bytes,9,opt,name=serialize,proto3" json:"serialize,omitempty"`
	Deserialize     *Deserialize     `protobuf:"bytes,10,opt,name=deserialize,proto3" json:"deserialize,omitempty"`
	StoreData       *StoreData       `protobuf:"bytes,11,opt,name=store_data,json=storeData,proto3" json:"store_data,omitempty"`
	GetData         *GetData         `protobuf:"bytes,12,opt,name=get_data,json=getData,proto3" json:"get_data,omitempty"`
	ReferenceData   *ReferenceData   `protobuf:"bytes,13,opt,name=reference_data,json=referenceData,proto3" json:"reference_data,omitempty"`
	DereferenceData *DereferenceData `protobuf:"bytes,14,opt,name=dereference_data,json=dereferenceData,proto3" json:"dereference_data,omitempty"`
	Get             *Get             `protobuf:"bytes,15,opt,name=get,proto3" json:"get,omitempty"`
	CommitState     *CommitState     `protobuf:"bytes,16,opt,name=commit_state,json=commitState,proto3" json:"commit_state,omitempty"`
	GetMany         *GetMany         `protobuf:"bytes,17,opt,name=get_many,json=getMany,proto3" json:"get_many,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{0}
}

func (x *Command) GetTransit() *Transit {
	if x != nil {
		return x.Transit
	}
	return nil
}

func (x *Command) GetPause() *Pause {
	if x != nil {
		return x.Pause
	}
	return nil
}

func (x *Command) GetResume() *Resume {
	if x != nil {
		return x.Resume
	}
	return nil
}

func (x *Command) GetEnd() *End {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Command) GetExecute() *Execute {
	if x != nil {
		return x.Execute
	}
	return nil
}

func (x *Command) GetDelay() *Delay {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *Command) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *Command) GetNoop() *Noop {
	if x != nil {
		return x.Noop
	}
	return nil
}

func (x *Command) GetSerialize() *Serialize {
	if x != nil {
		return x.Serialize
	}
	return nil
}

func (x *Command) GetDeserialize() *Deserialize {
	if x != nil {
		return x.Deserialize
	}
	return nil
}

func (x *Command) GetStoreData() *StoreData {
	if x != nil {
		return x.StoreData
	}
	return nil
}

func (x *Command) GetGetData() *GetData {
	if x != nil {
		return x.GetData
	}
	return nil
}

func (x *Command) GetReferenceData() *ReferenceData {
	if x != nil {
		return x.ReferenceData
	}
	return nil
}

func (x *Command) GetDereferenceData() *DereferenceData {
	if x != nil {
		return x.DereferenceData
	}
	return nil
}

func (x *Command) GetGet() *Get {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *Command) GetCommitState() *CommitState {
	if x != nil {
		return x.CommitState
	}
	return nil
}

func (x *Command) GetGetMany() *GetMany {
	if x != nil {
		return x.GetMany
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transit         *TransitResult         `protobuf:"bytes,1,opt,name=transit,proto3" json:"transit,omitempty"`
	Pause           *PauseResult           `protobuf:"bytes,2,opt,name=pause,proto3" json:"pause,omitempty"`
	Resume          *ResumeResult          `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	End             *EndResult             `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	Execute         *ExecuteResult         `protobuf:"bytes,5,opt,name=execute,proto3" json:"execute,omitempty"`
	Delay           *DelayResult           `protobuf:"bytes,6,opt,name=delay,proto3" json:"delay,omitempty"`
	Commit          *CommitResult          `protobuf:"bytes,7,opt,name=commit,proto3" json:"commit,omitempty"`
	Noop            *NoopResult            `protobuf:"bytes,8,opt,name=noop,proto3" json:"noop,omitempty"`
	Serialize       *SerializeResult       `protobuf:"bytes,9,opt,name=serialize,proto3" json:"serialize,omitempty"`
	Deserialize     *DeserializeResult     `protobuf:"bytes,10,opt,name=deserialize,proto3" json:"deserialize,omitempty"`
	StoreData       *StoreDataResult       `protobuf:"bytes,11,opt,name=store_data,json=storeData,proto3" json:"store_data,omitempty"`
	GetData         *GetDataResult         `protobuf:"bytes,12,opt,name=get_data,json=getData,proto3" json:"get_data,omitempty"`
	ReferenceData   *ReferenceDataResult   `protobuf:"bytes,13,opt,name=reference_data,json=referenceData,proto3" json:"reference_data,omitempty"`
	DereferenceData *DereferenceDataResult `protobuf:"bytes,14,opt,name=dereference_data,json=dereferenceData,proto3" json:"dereference_data,omitempty"`
	Get             *GetResult             `protobuf:"bytes,15,opt,name=get,proto3" json:"get,omitempty"`
	CommitState     *CommitStateResult     `protobuf:"bytes,16,opt,name=commit_state,json=commitState,proto3" json:"commit_state,omitempty"`
	GetMany         *GetManyResult         `protobuf:"bytes,17,opt,name=get_many,json=getMany,proto3" json:"get_many,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetTransit() *TransitResult {
	if x != nil {
		return x.Transit
	}
	return nil
}

func (x *Result) GetPause() *PauseResult {
	if x != nil {
		return x.Pause
	}
	return nil
}

func (x *Result) GetResume() *ResumeResult {
	if x != nil {
		return x.Resume
	}
	return nil
}

func (x *Result) GetEnd() *EndResult {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Result) GetExecute() *ExecuteResult {
	if x != nil {
		return x.Execute
	}
	return nil
}

func (x *Result) GetDelay() *DelayResult {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *Result) GetCommit() *CommitResult {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *Result) GetNoop() *NoopResult {
	if x != nil {
		return x.Noop
	}
	return nil
}

func (x *Result) GetSerialize() *SerializeResult {
	if x != nil {
		return x.Serialize
	}
	return nil
}

func (x *Result) GetDeserialize() *DeserializeResult {
	if x != nil {
		return x.Deserialize
	}
	return nil
}

func (x *Result) GetStoreData() *StoreDataResult {
	if x != nil {
		return x.StoreData
	}
	return nil
}

func (x *Result) GetGetData() *GetDataResult {
	if x != nil {
		return x.GetData
	}
	return nil
}

func (x *Result) GetReferenceData() *ReferenceDataResult {
	if x != nil {
		return x.ReferenceData
	}
	return nil
}

func (x *Result) GetDereferenceData() *DereferenceDataResult {
	if x != nil {
		return x.DereferenceData
	}
	return nil
}

func (x *Result) GetGet() *GetResult {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *Result) GetCommitState() *CommitStateResult {
	if x != nil {
		return x.CommitState
	}
	return nil
}

func (x *Result) GetGetMany() *GetManyResult {
	if x != nil {
		return x.GetMany
	}
	return nil
}

type Transit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	FlowId   string    `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
}

func (x *Transit) Reset() {
	*x = Transit{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transit) ProtoMessage() {}

func (x *Transit) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transit.ProtoReflect.Descriptor instead.
func (*Transit) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{2}
}

func (x *Transit) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *Transit) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type TransitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *TransitResult) Reset() {
	*x = TransitResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitResult) ProtoMessage() {}

func (x *TransitResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitResult.ProtoReflect.Descriptor instead.
func (*TransitResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{3}
}

func (x *TransitResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type Pause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	FlowId   string    `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
}

func (x *Pause) Reset() {
	*x = Pause{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pause) ProtoMessage() {}

func (x *Pause) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pause.ProtoReflect.Descriptor instead.
func (*Pause) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{4}
}

func (x *Pause) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *Pause) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

type PauseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *PauseResult) Reset() {
	*x = PauseResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseResult) ProtoMessage() {}

func (x *PauseResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseResult.ProtoReflect.Descriptor instead.
func (*PauseResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{5}
}

func (x *PauseResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type Resume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *Resume) Reset() {
	*x = Resume{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resume) ProtoMessage() {}

func (x *Resume) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resume.ProtoReflect.Descriptor instead.
func (*Resume) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{6}
}

func (x *Resume) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type ResumeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *ResumeResult) Reset() {
	*x = ResumeResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeResult) ProtoMessage() {}

func (x *ResumeResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeResult.ProtoReflect.Descriptor instead.
func (*ResumeResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{7}
}

func (x *ResumeResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type End struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *End) Reset() {
	*x = End{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *End) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*End) ProtoMessage() {}

func (x *End) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use End.ProtoReflect.Descriptor instead.
func (*End) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{8}
}

func (x *End) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type EndResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *EndResult) Reset() {
	*x = EndResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndResult) ProtoMessage() {}

func (x *EndResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndResult.ProtoReflect.Descriptor instead.
func (*EndResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{9}
}

func (x *EndResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type Execute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *Execute) Reset() {
	*x = Execute{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execute) ProtoMessage() {}

func (x *Execute) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execute.ProtoReflect.Descriptor instead.
func (*Execute) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{10}
}

func (x *Execute) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type ExecuteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *ExecuteResult) Reset() {
	*x = ExecuteResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResult) ProtoMessage() {}

func (x *ExecuteResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResult.ProtoReflect.Descriptor instead.
func (*ExecuteResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type Delay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	Duration string    `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Commit   bool      `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *Delay) Reset() {
	*x = Delay{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Delay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delay) ProtoMessage() {}

func (x *Delay) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delay.ProtoReflect.Descriptor instead.
func (*Delay) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{12}
}

func (x *Delay) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *Delay) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Delay) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

type DelayResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	Duration string    `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Commit   bool      `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *DelayResult) Reset() {
	*x = DelayResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelayResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayResult) ProtoMessage() {}

func (x *DelayResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayResult.ProtoReflect.Descriptor instead.
func (*DelayResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{13}
}

func (x *DelayResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *DelayResult) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *DelayResult) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []*Command `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{14}
}

func (x *Commit) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

type CommitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Result `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CommitResult) Reset() {
	*x = CommitResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResult) ProtoMessage() {}

func (x *CommitResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResult.ProtoReflect.Descriptor instead.
func (*CommitResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{15}
}

func (x *CommitResult) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type CommitState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *CommitState) Reset() {
	*x = CommitState{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitState) ProtoMessage() {}

func (x *CommitState) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitState.ProtoReflect.Descriptor instead.
func (*CommitState) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{16}
}

func (x *CommitState) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type CommitStateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *CommitStateResult) Reset() {
	*x = CommitStateResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitStateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStateResult) ProtoMessage() {}

func (x *CommitStateResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStateResult.ProtoReflect.Descriptor instead.
func (*CommitStateResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{17}
}

func (x *CommitStateResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type Noop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *Noop) Reset() {
	*x = Noop{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Noop) ProtoMessage() {}

func (x *Noop) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Noop.ProtoReflect.Descriptor instead.
func (*Noop) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{18}
}

func (x *Noop) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type NoopResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *NoopResult) Reset() {
	*x = NoopResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoopResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoopResult) ProtoMessage() {}

func (x *NoopResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoopResult.ProtoReflect.Descriptor instead.
func (*NoopResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{19}
}

func (x *NoopResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type Serialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializableStateRef *StateRef `protobuf:"bytes,1,opt,name=serializable_state_ref,json=serializableStateRef,proto3" json:"serializable_state_ref,omitempty"`
	StateRef             *StateRef `protobuf:"bytes,2,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	Annotation           string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *Serialize) Reset() {
	*x = Serialize{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Serialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Serialize) ProtoMessage() {}

func (x *Serialize) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Serialize.ProtoReflect.Descriptor instead.
func (*Serialize) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{20}
}

func (x *Serialize) GetSerializableStateRef() *StateRef {
	if x != nil {
		return x.SerializableStateRef
	}
	return nil
}

func (x *Serialize) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *Serialize) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type SerializeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializableStateRef *StateRef `protobuf:"bytes,1,opt,name=serializable_state_ref,json=serializableStateRef,proto3" json:"serializable_state_ref,omitempty"`
	StateRef             *StateRef `protobuf:"bytes,2,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	Annotation           string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *SerializeResult) Reset() {
	*x = SerializeResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeResult) ProtoMessage() {}

func (x *SerializeResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeResult.ProtoReflect.Descriptor instead.
func (*SerializeResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{21}
}

func (x *SerializeResult) GetSerializableStateRef() *StateRef {
	if x != nil {
		return x.SerializableStateRef
	}
	return nil
}

func (x *SerializeResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *SerializeResult) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type Deserialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeserializedStateRef *StateRef `protobuf:"bytes,1,opt,name=deserialized_state_ref,json=deserializedStateRef,proto3" json:"deserialized_state_ref,omitempty"`
	StateRef             *StateRef `protobuf:"bytes,2,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	Annotation           string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *Deserialize) Reset() {
	*x = Deserialize{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deserialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deserialize) ProtoMessage() {}

func (x *Deserialize) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deserialize.ProtoReflect.Descriptor instead.
func (*Deserialize) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{22}
}

func (x *Deserialize) GetDeserializedStateRef() *StateRef {
	if x != nil {
		return x.DeserializedStateRef
	}
	return nil
}

func (x *Deserialize) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *Deserialize) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type DeserializeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeserializedStateRef *StateRef `protobuf:"bytes,1,opt,name=deserialized_state_ref,json=deserializedStateRef,proto3" json:"deserialized_state_ref,omitempty"`
	StateRef             *StateRef `protobuf:"bytes,2,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	Annotation           string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *DeserializeResult) Reset() {
	*x = DeserializeResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeserializeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeserializeResult) ProtoMessage() {}

func (x *DeserializeResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeserializeResult.ProtoReflect.Descriptor instead.
func (*DeserializeResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{23}
}

func (x *DeserializeResult) GetDeserializedStateRef() *StateRef {
	if x != nil {
		return x.DeserializedStateRef
	}
	return nil
}

func (x *DeserializeResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *DeserializeResult) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type ReferenceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef   *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	DataRef    *DataRef  `protobuf:"bytes,2,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
	Annotation string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *ReferenceData) Reset() {
	*x = ReferenceData{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceData) ProtoMessage() {}

func (x *ReferenceData) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceData.ProtoReflect.Descriptor instead.
func (*ReferenceData) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{24}
}

func (x *ReferenceData) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *ReferenceData) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

func (x *ReferenceData) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type DereferenceDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef   *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	DataRef    *DataRef  `protobuf:"bytes,2,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
	Annotation string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *DereferenceDataResult) Reset() {
	*x = DereferenceDataResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DereferenceDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DereferenceDataResult) ProtoMessage() {}

func (x *DereferenceDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DereferenceDataResult.ProtoReflect.Descriptor instead.
func (*DereferenceDataResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{25}
}

func (x *DereferenceDataResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *DereferenceDataResult) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

func (x *DereferenceDataResult) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type DereferenceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef   *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	DataRef    *DataRef  `protobuf:"bytes,2,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
	Annotation string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *DereferenceData) Reset() {
	*x = DereferenceData{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DereferenceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DereferenceData) ProtoMessage() {}

func (x *DereferenceData) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DereferenceData.ProtoReflect.Descriptor instead.
func (*DereferenceData) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{26}
}

func (x *DereferenceData) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *DereferenceData) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

func (x *DereferenceData) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type ReferenceDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef   *StateRef `protobuf:"bytes,1,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
	DataRef    *DataRef  `protobuf:"bytes,2,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
	Annotation string    `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *ReferenceDataResult) Reset() {
	*x = ReferenceDataResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceDataResult) ProtoMessage() {}

func (x *ReferenceDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceDataResult.ProtoReflect.Descriptor instead.
func (*ReferenceDataResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{27}
}

func (x *ReferenceDataResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

func (x *ReferenceDataResult) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

func (x *ReferenceDataResult) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

type GetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataRef *DataRef `protobuf:"bytes,1,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
}

func (x *GetData) Reset() {
	*x = GetData{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetData) ProtoMessage() {}

func (x *GetData) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetData.ProtoReflect.Descriptor instead.
func (*GetData) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{28}
}

func (x *GetData) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

type GetDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataRef *DataRef `protobuf:"bytes,1,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
}

func (x *GetDataResult) Reset() {
	*x = GetDataResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataResult) ProtoMessage() {}

func (x *GetDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataResult.ProtoReflect.Descriptor instead.
func (*GetDataResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{29}
}

func (x *GetDataResult) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

type StoreData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataRef *DataRef `protobuf:"bytes,1,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
}

func (x *StoreData) Reset() {
	*x = StoreData{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreData) ProtoMessage() {}

func (x *StoreData) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreData.ProtoReflect.Descriptor instead.
func (*StoreData) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{30}
}

func (x *StoreData) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

type StoreDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataRef *DataRef `protobuf:"bytes,1,opt,name=data_ref,json=dataRef,proto3" json:"data_ref,omitempty"`
}

func (x *StoreDataResult) Reset() {
	*x = StoreDataResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDataResult) ProtoMessage() {}

func (x *StoreDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDataResult.ProtoReflect.Descriptor instead.
func (*StoreDataResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{31}
}

func (x *StoreDataResult) GetDataRef() *DataRef {
	if x != nil {
		return x.DataRef
	}
	return nil
}

type Get struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rev      int64             `protobuf:"varint,2,opt,name=rev,proto3" json:"rev,omitempty"`
	Labels   map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StateRef *StateRef         `protobuf:"bytes,4,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *Get) Reset() {
	*x = Get{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Get) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Get) ProtoMessage() {}

func (x *Get) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Get.ProtoReflect.Descriptor instead.
func (*Get) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{32}
}

func (x *Get) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Get) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

func (x *Get) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Get) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type GetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRef *StateRef `protobuf:"bytes,4,opt,name=state_ref,json=stateRef,proto3" json:"state_ref,omitempty"`
}

func (x *GetResult) Reset() {
	*x = GetResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResult) ProtoMessage() {}

func (x *GetResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResult.ProtoReflect.Descriptor instead.
func (*GetResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{33}
}

func (x *GetResult) GetStateRef() *StateRef {
	if x != nil {
		return x.StateRef
	}
	return nil
}

type GetMany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinceRev      int64             `protobuf:"varint,1,opt,name=since_rev,json=sinceRev,proto3" json:"since_rev,omitempty"`
	SinceTimeUsec int64             `protobuf:"varint,2,opt,name=since_time_usec,json=sinceTimeUsec,proto3" json:"since_time_usec,omitempty"` // unix milliseconds
	Labels        []*GetMany_Labels `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	LatestOnly    bool              `protobuf:"varint,4,opt,name=latest_only,json=latestOnly,proto3" json:"latest_only,omitempty"`
	Limit         int64             `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetMany) Reset() {
	*x = GetMany{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMany) ProtoMessage() {}

func (x *GetMany) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMany.ProtoReflect.Descriptor instead.
func (*GetMany) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{34}
}

func (x *GetMany) GetSinceRev() int64 {
	if x != nil {
		return x.SinceRev
	}
	return 0
}

func (x *GetMany) GetSinceTimeUsec() int64 {
	if x != nil {
		return x.SinceTimeUsec
	}
	return 0
}

func (x *GetMany) GetLabels() []*GetMany_Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetMany) GetLatestOnly() bool {
	if x != nil {
		return x.LatestOnly
	}
	return false
}

func (x *GetMany) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetManyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*State `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	More   bool     `protobuf:"varint,2,opt,name=more,proto3" json:"more,omitempty"`
}

func (x *GetManyResult) Reset() {
	*x = GetManyResult{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetManyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManyResult) ProtoMessage() {}

func (x *GetManyResult) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManyResult.ProtoReflect.Descriptor instead.
func (*GetManyResult) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{35}
}

func (x *GetManyResult) GetStates() []*State {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *GetManyResult) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

type GetMany_Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMany_Labels) Reset() {
	*x = GetMany_Labels{}
	mi := &file_flowstate_v1_commands_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMany_Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMany_Labels) ProtoMessage() {}

func (x *GetMany_Labels) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_commands_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMany_Labels.ProtoReflect.Descriptor instead.
func (*GetMany_Labels) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_commands_proto_rawDescGZIP(), []int{34, 0}
}

func (x *GetMany_Labels) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_flowstate_v1_commands_proto protoreflect.FileDescriptor

var file_flowstate_v1_commands_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9f, 0x08, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2f,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x2f, 0x0a,
	0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12,
	0x35, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x64, 0x65, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x03, 0x67,
	0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x03, 0x67, 0x65, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79,
	0x3a, 0xb1, 0x01, 0xba, 0x48, 0xad, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x0a,
	0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x79, 0x10, 0x01, 0x22, 0x84, 0x09, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x35, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x32,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70,
	0x12, 0x3b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36,
	0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4e, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x3a, 0xb1, 0x01, 0xba, 0x48, 0xad, 0x01, 0x22, 0xaa,
	0x01, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x0a, 0x07,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x03, 0x67, 0x65,
	0x74, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x0a,
	0x08, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x10, 0x01, 0x22, 0x57, 0x0a, 0x07, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x55, 0x0a, 0x05, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x22, 0x42, 0x0a, 0x0b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x3d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x22, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x3a, 0x0a, 0x03, 0x45, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x40, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x3e, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x44, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x70, 0x0a,
	0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22,
	0x76, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x3b, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x22, 0x3e, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22, 0x48, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x22, 0x3b, 0x0a, 0x04, 0x4e, 0x6f, 0x6f, 0x70, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x22,
	0x41, 0x0a, 0x0a, 0x4e, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x22, 0xae, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x12, 0x4c, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x33,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x16, 0x64, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x14, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x14, 0x64, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x30, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9e, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x30,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x98, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x22, 0x41, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x22, 0x3d, 0x0a, 0x09, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x22, 0x43, 0x0a, 0x0f, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x22, 0xce,
	0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x40, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x22, 0xc3, 0x02, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x63, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x85, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x42, 0xb5, 0x01, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6b, 0x61,
	0x73, 0x69, 0x6d, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x72, 0x76,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flowstate_v1_commands_proto_rawDescOnce sync.Once
	file_flowstate_v1_commands_proto_rawDescData = file_flowstate_v1_commands_proto_rawDesc
)

func file_flowstate_v1_commands_proto_rawDescGZIP() []byte {
	file_flowstate_v1_commands_proto_rawDescOnce.Do(func() {
		file_flowstate_v1_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_flowstate_v1_commands_proto_rawDescData)
	})
	return file_flowstate_v1_commands_proto_rawDescData
}

var file_flowstate_v1_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_flowstate_v1_commands_proto_goTypes = []any{
	(*Command)(nil),               // 0: flowstate.v1.Command
	(*Result)(nil),                // 1: flowstate.v1.Result
	(*Transit)(nil),               // 2: flowstate.v1.Transit
	(*TransitResult)(nil),         // 3: flowstate.v1.TransitResult
	(*Pause)(nil),                 // 4: flowstate.v1.Pause
	(*PauseResult)(nil),           // 5: flowstate.v1.PauseResult
	(*Resume)(nil),                // 6: flowstate.v1.Resume
	(*ResumeResult)(nil),          // 7: flowstate.v1.ResumeResult
	(*End)(nil),                   // 8: flowstate.v1.End
	(*EndResult)(nil),             // 9: flowstate.v1.EndResult
	(*Execute)(nil),               // 10: flowstate.v1.Execute
	(*ExecuteResult)(nil),         // 11: flowstate.v1.ExecuteResult
	(*Delay)(nil),                 // 12: flowstate.v1.Delay
	(*DelayResult)(nil),           // 13: flowstate.v1.DelayResult
	(*Commit)(nil),                // 14: flowstate.v1.Commit
	(*CommitResult)(nil),          // 15: flowstate.v1.CommitResult
	(*CommitState)(nil),           // 16: flowstate.v1.CommitState
	(*CommitStateResult)(nil),     // 17: flowstate.v1.CommitStateResult
	(*Noop)(nil),                  // 18: flowstate.v1.Noop
	(*NoopResult)(nil),            // 19: flowstate.v1.NoopResult
	(*Serialize)(nil),             // 20: flowstate.v1.Serialize
	(*SerializeResult)(nil),       // 21: flowstate.v1.SerializeResult
	(*Deserialize)(nil),           // 22: flowstate.v1.Deserialize
	(*DeserializeResult)(nil),     // 23: flowstate.v1.DeserializeResult
	(*ReferenceData)(nil),         // 24: flowstate.v1.ReferenceData
	(*DereferenceDataResult)(nil), // 25: flowstate.v1.DereferenceDataResult
	(*DereferenceData)(nil),       // 26: flowstate.v1.DereferenceData
	(*ReferenceDataResult)(nil),   // 27: flowstate.v1.ReferenceDataResult
	(*GetData)(nil),               // 28: flowstate.v1.GetData
	(*GetDataResult)(nil),         // 29: flowstate.v1.GetDataResult
	(*StoreData)(nil),             // 30: flowstate.v1.StoreData
	(*StoreDataResult)(nil),       // 31: flowstate.v1.StoreDataResult
	(*Get)(nil),                   // 32: flowstate.v1.Get
	(*GetResult)(nil),             // 33: flowstate.v1.GetResult
	(*GetMany)(nil),               // 34: flowstate.v1.GetMany
	(*GetManyResult)(nil),         // 35: flowstate.v1.GetManyResult
	nil,                           // 36: flowstate.v1.Get.LabelsEntry
	(*GetMany_Labels)(nil),        // 37: flowstate.v1.GetMany.Labels
	nil,                           // 38: flowstate.v1.GetMany.Labels.LabelsEntry
	(*StateRef)(nil),              // 39: flowstate.v1.StateRef
	(*DataRef)(nil),               // 40: flowstate.v1.DataRef
	(*State)(nil),                 // 41: flowstate.v1.State
}
var file_flowstate_v1_commands_proto_depIdxs = []int32{
	2,  // 0: flowstate.v1.Command.transit:type_name -> flowstate.v1.Transit
	4,  // 1: flowstate.v1.Command.pause:type_name -> flowstate.v1.Pause
	6,  // 2: flowstate.v1.Command.resume:type_name -> flowstate.v1.Resume
	8,  // 3: flowstate.v1.Command.end:type_name -> flowstate.v1.End
	10, // 4: flowstate.v1.Command.execute:type_name -> flowstate.v1.Execute
	12, // 5: flowstate.v1.Command.delay:type_name -> flowstate.v1.Delay
	14, // 6: flowstate.v1.Command.commit:type_name -> flowstate.v1.Commit
	18, // 7: flowstate.v1.Command.noop:type_name -> flowstate.v1.Noop
	20, // 8: flowstate.v1.Command.serialize:type_name -> flowstate.v1.Serialize
	22, // 9: flowstate.v1.Command.deserialize:type_name -> flowstate.v1.Deserialize
	30, // 10: flowstate.v1.Command.store_data:type_name -> flowstate.v1.StoreData
	28, // 11: flowstate.v1.Command.get_data:type_name -> flowstate.v1.GetData
	24, // 12: flowstate.v1.Command.reference_data:type_name -> flowstate.v1.ReferenceData
	26, // 13: flowstate.v1.Command.dereference_data:type_name -> flowstate.v1.DereferenceData
	32, // 14: flowstate.v1.Command.get:type_name -> flowstate.v1.Get
	16, // 15: flowstate.v1.Command.commit_state:type_name -> flowstate.v1.CommitState
	34, // 16: flowstate.v1.Command.get_many:type_name -> flowstate.v1.GetMany
	3,  // 17: flowstate.v1.Result.transit:type_name -> flowstate.v1.TransitResult
	5,  // 18: flowstate.v1.Result.pause:type_name -> flowstate.v1.PauseResult
	7,  // 19: flowstate.v1.Result.resume:type_name -> flowstate.v1.ResumeResult
	9,  // 20: flowstate.v1.Result.end:type_name -> flowstate.v1.EndResult
	11, // 21: flowstate.v1.Result.execute:type_name -> flowstate.v1.ExecuteResult
	13, // 22: flowstate.v1.Result.delay:type_name -> flowstate.v1.DelayResult
	15, // 23: flowstate.v1.Result.commit:type_name -> flowstate.v1.CommitResult
	19, // 24: flowstate.v1.Result.noop:type_name -> flowstate.v1.NoopResult
	21, // 25: flowstate.v1.Result.serialize:type_name -> flowstate.v1.SerializeResult
	23, // 26: flowstate.v1.Result.deserialize:type_name -> flowstate.v1.DeserializeResult
	31, // 27: flowstate.v1.Result.store_data:type_name -> flowstate.v1.StoreDataResult
	29, // 28: flowstate.v1.Result.get_data:type_name -> flowstate.v1.GetDataResult
	27, // 29: flowstate.v1.Result.reference_data:type_name -> flowstate.v1.ReferenceDataResult
	25, // 30: flowstate.v1.Result.dereference_data:type_name -> flowstate.v1.DereferenceDataResult
	33, // 31: flowstate.v1.Result.get:type_name -> flowstate.v1.GetResult
	17, // 32: flowstate.v1.Result.commit_state:type_name -> flowstate.v1.CommitStateResult
	35, // 33: flowstate.v1.Result.get_many:type_name -> flowstate.v1.GetManyResult
	39, // 34: flowstate.v1.Transit.state_ref:type_name -> flowstate.v1.StateRef
	39, // 35: flowstate.v1.TransitResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 36: flowstate.v1.Pause.state_ref:type_name -> flowstate.v1.StateRef
	39, // 37: flowstate.v1.PauseResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 38: flowstate.v1.Resume.state_ref:type_name -> flowstate.v1.StateRef
	39, // 39: flowstate.v1.ResumeResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 40: flowstate.v1.End.state_ref:type_name -> flowstate.v1.StateRef
	39, // 41: flowstate.v1.EndResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 42: flowstate.v1.Execute.state_ref:type_name -> flowstate.v1.StateRef
	39, // 43: flowstate.v1.ExecuteResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 44: flowstate.v1.Delay.state_ref:type_name -> flowstate.v1.StateRef
	39, // 45: flowstate.v1.DelayResult.state_ref:type_name -> flowstate.v1.StateRef
	0,  // 46: flowstate.v1.Commit.commands:type_name -> flowstate.v1.Command
	1,  // 47: flowstate.v1.CommitResult.results:type_name -> flowstate.v1.Result
	39, // 48: flowstate.v1.CommitState.state_ref:type_name -> flowstate.v1.StateRef
	39, // 49: flowstate.v1.CommitStateResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 50: flowstate.v1.Noop.state_ref:type_name -> flowstate.v1.StateRef
	39, // 51: flowstate.v1.NoopResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 52: flowstate.v1.Serialize.serializable_state_ref:type_name -> flowstate.v1.StateRef
	39, // 53: flowstate.v1.Serialize.state_ref:type_name -> flowstate.v1.StateRef
	39, // 54: flowstate.v1.SerializeResult.serializable_state_ref:type_name -> flowstate.v1.StateRef
	39, // 55: flowstate.v1.SerializeResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 56: flowstate.v1.Deserialize.deserialized_state_ref:type_name -> flowstate.v1.StateRef
	39, // 57: flowstate.v1.Deserialize.state_ref:type_name -> flowstate.v1.StateRef
	39, // 58: flowstate.v1.DeserializeResult.deserialized_state_ref:type_name -> flowstate.v1.StateRef
	39, // 59: flowstate.v1.DeserializeResult.state_ref:type_name -> flowstate.v1.StateRef
	39, // 60: flowstate.v1.ReferenceData.state_ref:type_name -> flowstate.v1.StateRef
	40, // 61: flowstate.v1.ReferenceData.data_ref:type_name -> flowstate.v1.DataRef
	39, // 62: flowstate.v1.DereferenceDataResult.state_ref:type_name -> flowstate.v1.StateRef
	40, // 63: flowstate.v1.DereferenceDataResult.data_ref:type_name -> flowstate.v1.DataRef
	39, // 64: flowstate.v1.DereferenceData.state_ref:type_name -> flowstate.v1.StateRef
	40, // 65: flowstate.v1.DereferenceData.data_ref:type_name -> flowstate.v1.DataRef
	39, // 66: flowstate.v1.ReferenceDataResult.state_ref:type_name -> flowstate.v1.StateRef
	40, // 67: flowstate.v1.ReferenceDataResult.data_ref:type_name -> flowstate.v1.DataRef
	40, // 68: flowstate.v1.GetData.data_ref:type_name -> flowstate.v1.DataRef
	40, // 69: flowstate.v1.GetDataResult.data_ref:type_name -> flowstate.v1.DataRef
	40, // 70: flowstate.v1.StoreData.data_ref:type_name -> flowstate.v1.DataRef
	40, // 71: flowstate.v1.StoreDataResult.data_ref:type_name -> flowstate.v1.DataRef
	36, // 72: flowstate.v1.Get.labels:type_name -> flowstate.v1.Get.LabelsEntry
	39, // 73: flowstate.v1.Get.state_ref:type_name -> flowstate.v1.StateRef
	39, // 74: flowstate.v1.GetResult.state_ref:type_name -> flowstate.v1.StateRef
	37, // 75: flowstate.v1.GetMany.labels:type_name -> flowstate.v1.GetMany.Labels
	41, // 76: flowstate.v1.GetManyResult.states:type_name -> flowstate.v1.State
	38, // 77: flowstate.v1.GetMany.Labels.labels:type_name -> flowstate.v1.GetMany.Labels.LabelsEntry
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_flowstate_v1_commands_proto_init() }
func file_flowstate_v1_commands_proto_init() {
	if File_flowstate_v1_commands_proto != nil {
		return
	}
	file_flowstate_v1_state_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flowstate_v1_commands_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flowstate_v1_commands_proto_goTypes,
		DependencyIndexes: file_flowstate_v1_commands_proto_depIdxs,
		MessageInfos:      file_flowstate_v1_commands_proto_msgTypes,
	}.Build()
	File_flowstate_v1_commands_proto = out.File
	file_flowstate_v1_commands_proto_rawDesc = nil
	file_flowstate_v1_commands_proto_goTypes = nil
	file_flowstate_v1_commands_proto_depIdxs = nil
}
