// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flowstate/v1/services.proto

package flowstatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/makasim/flowstatesrv/protogen/flowstate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DriverName is the fully-qualified name of the Driver service.
	DriverName = "flowstate.v1.Driver"
	// FlowName is the fully-qualified name of the Flow service.
	FlowName = "flowstate.v1.Flow"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DriverDoProcedure is the fully-qualified name of the Driver's Do RPC.
	DriverDoProcedure = "/flowstate.v1.Driver/Do"
	// DriverGetStateByIDProcedure is the fully-qualified name of the Driver's GetStateByID RPC.
	DriverGetStateByIDProcedure = "/flowstate.v1.Driver/GetStateByID"
	// DriverGetStateByLabelsProcedure is the fully-qualified name of the Driver's GetStateByLabels RPC.
	DriverGetStateByLabelsProcedure = "/flowstate.v1.Driver/GetStateByLabels"
	// DriverGetStatesProcedure is the fully-qualified name of the Driver's GetStates RPC.
	DriverGetStatesProcedure = "/flowstate.v1.Driver/GetStates"
	// DriverGetDelayedStatesProcedure is the fully-qualified name of the Driver's GetDelayedStates RPC.
	DriverGetDelayedStatesProcedure = "/flowstate.v1.Driver/GetDelayedStates"
	// DriverDelayProcedure is the fully-qualified name of the Driver's Delay RPC.
	DriverDelayProcedure = "/flowstate.v1.Driver/Delay"
	// DriverCommitProcedure is the fully-qualified name of the Driver's Commit RPC.
	DriverCommitProcedure = "/flowstate.v1.Driver/Commit"
	// DriverGetDataProcedure is the fully-qualified name of the Driver's GetData RPC.
	DriverGetDataProcedure = "/flowstate.v1.Driver/GetData"
	// DriverStoreDataProcedure is the fully-qualified name of the Driver's StoreData RPC.
	DriverStoreDataProcedure = "/flowstate.v1.Driver/StoreData"
	// FlowExecuteProcedure is the fully-qualified name of the Flow's Execute RPC.
	FlowExecuteProcedure = "/flowstate.v1.Flow/Execute"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	driverServiceDescriptor                = v1.File_flowstate_v1_services_proto.Services().ByName("Driver")
	driverDoMethodDescriptor               = driverServiceDescriptor.Methods().ByName("Do")
	driverGetStateByIDMethodDescriptor     = driverServiceDescriptor.Methods().ByName("GetStateByID")
	driverGetStateByLabelsMethodDescriptor = driverServiceDescriptor.Methods().ByName("GetStateByLabels")
	driverGetStatesMethodDescriptor        = driverServiceDescriptor.Methods().ByName("GetStates")
	driverGetDelayedStatesMethodDescriptor = driverServiceDescriptor.Methods().ByName("GetDelayedStates")
	driverDelayMethodDescriptor            = driverServiceDescriptor.Methods().ByName("Delay")
	driverCommitMethodDescriptor           = driverServiceDescriptor.Methods().ByName("Commit")
	driverGetDataMethodDescriptor          = driverServiceDescriptor.Methods().ByName("GetData")
	driverStoreDataMethodDescriptor        = driverServiceDescriptor.Methods().ByName("StoreData")
	flowServiceDescriptor                  = v1.File_flowstate_v1_services_proto.Services().ByName("Flow")
	flowExecuteMethodDescriptor            = flowServiceDescriptor.Methods().ByName("Execute")
)

// DriverClient is a client for the flowstate.v1.Driver service.
type DriverClient interface {
	Do(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetStateByID(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetStateByLabels(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetStates(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetDelayedStates(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	Delay(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	Commit(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetData(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	StoreData(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
}

// NewDriverClient constructs a client for the flowstate.v1.Driver service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDriverClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DriverClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &driverClient{
		do: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverDoProcedure,
			connect.WithSchema(driverDoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStateByID: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverGetStateByIDProcedure,
			connect.WithSchema(driverGetStateByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStateByLabels: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverGetStateByLabelsProcedure,
			connect.WithSchema(driverGetStateByLabelsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStates: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverGetStatesProcedure,
			connect.WithSchema(driverGetStatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDelayedStates: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverGetDelayedStatesProcedure,
			connect.WithSchema(driverGetDelayedStatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delay: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverDelayProcedure,
			connect.WithSchema(driverDelayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		commit: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverCommitProcedure,
			connect.WithSchema(driverCommitMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getData: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverGetDataProcedure,
			connect.WithSchema(driverGetDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		storeData: connect.NewClient[v1.Command, v1.Command](
			httpClient,
			baseURL+DriverStoreDataProcedure,
			connect.WithSchema(driverStoreDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// driverClient implements DriverClient.
type driverClient struct {
	do               *connect.Client[v1.Command, v1.Command]
	getStateByID     *connect.Client[v1.Command, v1.Command]
	getStateByLabels *connect.Client[v1.Command, v1.Command]
	getStates        *connect.Client[v1.Command, v1.Command]
	getDelayedStates *connect.Client[v1.Command, v1.Command]
	delay            *connect.Client[v1.Command, v1.Command]
	commit           *connect.Client[v1.Command, v1.Command]
	getData          *connect.Client[v1.Command, v1.Command]
	storeData        *connect.Client[v1.Command, v1.Command]
}

// Do calls flowstate.v1.Driver.Do.
func (c *driverClient) Do(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.do.CallUnary(ctx, req)
}

// GetStateByID calls flowstate.v1.Driver.GetStateByID.
func (c *driverClient) GetStateByID(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.getStateByID.CallUnary(ctx, req)
}

// GetStateByLabels calls flowstate.v1.Driver.GetStateByLabels.
func (c *driverClient) GetStateByLabels(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.getStateByLabels.CallUnary(ctx, req)
}

// GetStates calls flowstate.v1.Driver.GetStates.
func (c *driverClient) GetStates(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.getStates.CallUnary(ctx, req)
}

// GetDelayedStates calls flowstate.v1.Driver.GetDelayedStates.
func (c *driverClient) GetDelayedStates(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.getDelayedStates.CallUnary(ctx, req)
}

// Delay calls flowstate.v1.Driver.Delay.
func (c *driverClient) Delay(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.delay.CallUnary(ctx, req)
}

// Commit calls flowstate.v1.Driver.Commit.
func (c *driverClient) Commit(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.commit.CallUnary(ctx, req)
}

// GetData calls flowstate.v1.Driver.GetData.
func (c *driverClient) GetData(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.getData.CallUnary(ctx, req)
}

// StoreData calls flowstate.v1.Driver.StoreData.
func (c *driverClient) StoreData(ctx context.Context, req *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return c.storeData.CallUnary(ctx, req)
}

// DriverHandler is an implementation of the flowstate.v1.Driver service.
type DriverHandler interface {
	Do(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetStateByID(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetStateByLabels(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetStates(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetDelayedStates(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	Delay(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	Commit(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	GetData(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
	StoreData(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error)
}

// NewDriverHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDriverHandler(svc DriverHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	driverDoHandler := connect.NewUnaryHandler(
		DriverDoProcedure,
		svc.Do,
		connect.WithSchema(driverDoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverGetStateByIDHandler := connect.NewUnaryHandler(
		DriverGetStateByIDProcedure,
		svc.GetStateByID,
		connect.WithSchema(driverGetStateByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverGetStateByLabelsHandler := connect.NewUnaryHandler(
		DriverGetStateByLabelsProcedure,
		svc.GetStateByLabels,
		connect.WithSchema(driverGetStateByLabelsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverGetStatesHandler := connect.NewUnaryHandler(
		DriverGetStatesProcedure,
		svc.GetStates,
		connect.WithSchema(driverGetStatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverGetDelayedStatesHandler := connect.NewUnaryHandler(
		DriverGetDelayedStatesProcedure,
		svc.GetDelayedStates,
		connect.WithSchema(driverGetDelayedStatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverDelayHandler := connect.NewUnaryHandler(
		DriverDelayProcedure,
		svc.Delay,
		connect.WithSchema(driverDelayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverCommitHandler := connect.NewUnaryHandler(
		DriverCommitProcedure,
		svc.Commit,
		connect.WithSchema(driverCommitMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverGetDataHandler := connect.NewUnaryHandler(
		DriverGetDataProcedure,
		svc.GetData,
		connect.WithSchema(driverGetDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	driverStoreDataHandler := connect.NewUnaryHandler(
		DriverStoreDataProcedure,
		svc.StoreData,
		connect.WithSchema(driverStoreDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flowstate.v1.Driver/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DriverDoProcedure:
			driverDoHandler.ServeHTTP(w, r)
		case DriverGetStateByIDProcedure:
			driverGetStateByIDHandler.ServeHTTP(w, r)
		case DriverGetStateByLabelsProcedure:
			driverGetStateByLabelsHandler.ServeHTTP(w, r)
		case DriverGetStatesProcedure:
			driverGetStatesHandler.ServeHTTP(w, r)
		case DriverGetDelayedStatesProcedure:
			driverGetDelayedStatesHandler.ServeHTTP(w, r)
		case DriverDelayProcedure:
			driverDelayHandler.ServeHTTP(w, r)
		case DriverCommitProcedure:
			driverCommitHandler.ServeHTTP(w, r)
		case DriverGetDataProcedure:
			driverGetDataHandler.ServeHTTP(w, r)
		case DriverStoreDataProcedure:
			driverStoreDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDriverHandler returns CodeUnimplemented from all methods.
type UnimplementedDriverHandler struct{}

func (UnimplementedDriverHandler) Do(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.Do is not implemented"))
}

func (UnimplementedDriverHandler) GetStateByID(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.GetStateByID is not implemented"))
}

func (UnimplementedDriverHandler) GetStateByLabels(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.GetStateByLabels is not implemented"))
}

func (UnimplementedDriverHandler) GetStates(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.GetStates is not implemented"))
}

func (UnimplementedDriverHandler) GetDelayedStates(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.GetDelayedStates is not implemented"))
}

func (UnimplementedDriverHandler) Delay(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.Delay is not implemented"))
}

func (UnimplementedDriverHandler) Commit(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.Commit is not implemented"))
}

func (UnimplementedDriverHandler) GetData(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.GetData is not implemented"))
}

func (UnimplementedDriverHandler) StoreData(context.Context, *connect.Request[v1.Command]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Driver.StoreData is not implemented"))
}

// FlowClient is a client for the flowstate.v1.Flow service.
type FlowClient interface {
	Execute(context.Context, *connect.Request[v1.StateCtx]) (*connect.Response[v1.Command], error)
}

// NewFlowClient constructs a client for the flowstate.v1.Flow service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFlowClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FlowClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &flowClient{
		execute: connect.NewClient[v1.StateCtx, v1.Command](
			httpClient,
			baseURL+FlowExecuteProcedure,
			connect.WithSchema(flowExecuteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// flowClient implements FlowClient.
type flowClient struct {
	execute *connect.Client[v1.StateCtx, v1.Command]
}

// Execute calls flowstate.v1.Flow.Execute.
func (c *flowClient) Execute(ctx context.Context, req *connect.Request[v1.StateCtx]) (*connect.Response[v1.Command], error) {
	return c.execute.CallUnary(ctx, req)
}

// FlowHandler is an implementation of the flowstate.v1.Flow service.
type FlowHandler interface {
	Execute(context.Context, *connect.Request[v1.StateCtx]) (*connect.Response[v1.Command], error)
}

// NewFlowHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFlowHandler(svc FlowHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	flowExecuteHandler := connect.NewUnaryHandler(
		FlowExecuteProcedure,
		svc.Execute,
		connect.WithSchema(flowExecuteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flowstate.v1.Flow/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FlowExecuteProcedure:
			flowExecuteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFlowHandler returns CodeUnimplemented from all methods.
type UnimplementedFlowHandler struct{}

func (UnimplementedFlowHandler) Execute(context.Context, *connect.Request[v1.StateCtx]) (*connect.Response[v1.Command], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flowstate.v1.Flow.Execute is not implemented"))
}
